/*
 *  TOPPERS/JSP Kernel
 *      Toyohashi Open Platform for Embedded Real-Time Systems/
 *      Just Standard Profile Kernel
 * 
 *  Copyright (C) 2000-2002 by Embedded and Real-Time Systems Laboratory
 *                              Toyohashi Univ. of Technology, JAPAN
 * 
 *  上記著作権者は，Free Software Foundation によって公表されている 
 *  GNU General Public License の Version 2 に記述されている条件か，以
 *  下の条件のいずれかを満たす場合に限り，本ソフトウェア（本ソフトウェ
 *  アを改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
 *  利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを再利用可能なバイナリコード（リロケータブルオブ
 *      ジェクトファイルやライブラリなど）の形で利用する場合には，利用
 *      に伴うドキュメント（利用者マニュアルなど）に，上記の著作権表示，
 *      この利用条件および下記の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを再利用不可能なバイナリコードの形または機器に組
 *      み込んだ形で利用する場合には，次のいずれかの条件を満たすこと．
 *    (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
 *        権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
 *        こと．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者を免責すること．
 * 
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
 *  本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
 *  ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
 *  かなる損害に関しても，その責任を負わない．
 * 
 *  @(#) $Id: hw_timer.h,v 1.3 2002/04/14 14:19:50 reiji Exp $
 */


#ifndef _HW_TIMER_H_
#define _HW_TIMER_H_


#include "c54x.h"
#include "sys_defs.h"
#include "cpu_config.h"

#define INHNO_TIMER TINT0_VEC

#define TO_CLOCK(nume,deno) (TIMER_CLOCK * (nume) / (deno))

#define MAX_CLOCK ((CLOCK) 0xffff)

#define GET_TOLERANCE 100

#ifndef _MACRO_ONLY

typedef UH CLOCK;

Inline void
hw_timer_initialize()
{
  CLOCK c=TO_CLOCK(TIC_NUME,TIC_DENO);

   TMU0.TCR=TCR_TSS | 0x0009;   /* 0.25 μsecでカウントする   */
  //TMU0.TCR = TCR_TSS | 0x0001;
  TMU0.PRD=c-1;                  /* カウンタの設定             */
  TMU0.TCR|=TCR_TRB;           /* ダウンカウンタの初期値設定 */
  TMU0.TCR&=~TCR_TSS;          /* タイマの起動               */

  IFR|=(0x1 << TINT0);
  IMR|=(0x1 << TINT0);
}

Inline void
hw_timer_int_clear()
{
}

Inline void
hw_timer_terminate()
{
  TMU0.TCR|=TCR_TSS;
  IFR|=(0x1 << TINT0);
}

Inline CLOCK
hw_timer_get_current(void)
{
  return (TO_CLOCK(TIC_NUME,TIC_DENO) - TMU0.TIM);
}

Inline BOOL
hw_timer_fetch_interrupt(void)
{
  return (IFR & (0x1 << TINT0));
}

#endif

#endif
