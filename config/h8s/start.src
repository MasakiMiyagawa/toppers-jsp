 ;/*
 ;*  TOPPERS/JSP Kernel
 ;*      Toyohashi Open Platform for Embedded Real-Time Systems/
 ;*      Just Standard Profile Kernel
 ;*
 ;*  Copyright (C) 2000-2002 by Embedded and Real-Time Systems Laboratory
 ;*                              Toyohashi Univ. of Technology, JAPAN
 ;*  Copyright (C) 2001,2002 by Dep. of Computer Science and Engineering
 ;*                   Tomakomai National College of Technology, JAPAN
 ;*  Copyright (C) 2001,2002 by Industrial Technology Institute,
 ;*                              Miyagi Prefectural Government, JAPAN
 ;*
 ;*  上記著作権者は，Free Software Foundation によって公表されている
 ;*  GNU General Public License の Version 2 に記述されている条件か，以
 ;*  下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェア（本ソフトウェ
 ;*  アを改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
 ;*  利用と呼ぶ）することを無償で許諾する．
 ;*  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 ;*      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 ;*      スコード中に含まれていること．
 ;*  (2) 本ソフトウェアを再利用可能なバイナリコード（リロケータブルオブ
 ;*      ジェクトファイルやライブラリなど）の形で利用する場合には，利用
 ;*      に伴うドキュメント（利用者マニュアルなど）に，上記の著作権表示，
 ;*      この利用条件および下記の無保証規定を掲載すること．
 ;*  (3) 本ソフトウェアを再利用不可能なバイナリコードの形または機器に組
 ;*      み込んだ形で利用する場合には，次のいずれかの条件を満たすこと．
 ;*    (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
 ;*        権表示，この利用条件および下記の無保証規定を掲載すること．
 ;*    (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
 ;*        こと．
 ;*  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 ;*      害からも，上記著作権者を免責すること．
 ;*
 ;*  本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
 ;*  本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
 ;*  ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
 ;*  かなる損害に関しても，その責任を負わない．
 ;*
 ;*  @(#) $Id: start.src,v 1.2 2002/04/13 13:14:45 imai Exp $
 ;*/

;/*  日立純正Cコンパイラ用アセンブラソース  */

	.CPU 2000A:24

_MACRO_ONLY: .DEFINE  ""
	.INCLUDE "sys_config_asm.h"
	.INCLUDE "cpu_config_asm.h"

;/*   H8S用スタートアップモジュール                     */
;/*   カーネルはアプリケーションとリンクして使用する    */
;/*   だけなのでJSPカーネルのみ使用する。	        */

	.SECTION D,DATA,ALIGN=2
	.SECTION R,DATA,ALIGN=2
	.SECTION B,DATA,ALIGN=2
	.SECTION P,CODE,ALIGN=2
	
        .INCLUDE "cpu_config_asm.h"
	.GLOBAL	_start
        .IMPORT _kernel_start
        .IMPORT _hardware_init_hook
        .IMPORT _intnest
        .GLOBAL start_1

_software_init_hook:	.EQU	0

_start:

	;/*
	;*  CCRを初期化する。（割込み禁止:割込み制御モード0)
	;*  (_hardware_init_hook内で割込み制御モードを変更するまでは、
	;*　　割込み制御モードは0である。)
	;*/
        ldc.b     #MAX_IPM_CCR, ccr
	;/*
	;*  EXRを初期化する。（割込み禁止:割込み制御モード2)
	;*  IPM=0x07
	;*/
        ldc.b     #MAX_IPM, exr
	
	;/* タスク独立のスタックをSTACKTOPに初期化する  */
	;/* STACKTOPは、sys_config_asm.hで定義          */

	mov.l	#STACKTOP, sp

	 ;/*                                                      */
	 ;/*  _hardware_init_hook を呼び出す。(0でない場合)        */
	 ;/*                                                       */
	 ;/*  ハードウェア依存に必要な初期化処理がある場合は，     */
	 ;/*  hardware_init_hook という関数を用意すればよい．      */
	 ;/*  具体的にはROM化の際、RAMを使用可能にするための       */
	 ;/*  バスコントローラの初期化等を行う。                   */
	 ;/*  sys_support.S 内で hardware_init_hook を定義してい   */
	 ;/*  る．                                                 */

start_0:
	mov.l  	@_hardware_init_hook_k, er0
	or.l	er0, er0
	beq	start_1
	;jsr	@er0
	jmp	@er0
	
	
         ;/* bssセクションをクリア */

start_1:		
	mov.l	@_bss_start_k, er0
	mov.l	@_end_k, er1
	sub.l	er2, er2
start_2:
        mov.l	er2, @er0
	add.l	#4, er0
	cmp.l	er1, er0
 	blo	start_2		;/* er1 > er0 */

	;/*                                                              */
	;/*  dataセクションを初期化する（ROM化対応）．                   */
	;/*                                                              */
	;/*  __idata_start から __idata_end までを，__data_start 以降に  */
	;/*  コピーする．                                                */
start_3:
	mov.l	@__idata_start_k, er0
	mov.l	@__idata_end_k, er1
	mov.l	@__data_start_k, er2
start_4:
	mov.l	@er0+, er4	;/* *er2++ = *er0 ++; */
	mov.l	er4, @er2
	add.l	#4, er2
	cmp.l	er1, er0
	blo	start_4		;/* er1 > er0 */
	
	;/* 							        */
	;/*  software_init_hook を呼び出す（0 でない場合）．            */
	;/*                                                             */
	;/*  ソフトウェア環境（特にライブラリ）に依存して必要な初期化処 */
	;/*  理がある場合は，software_init_hook という関数を用意すれば  */
	;/*  よい．                                                     */

	mov.l	@_software_init_hook_k, er0
	or.l	er0, er0
	beq	start_6		
	jsr	@er0
		
	;/*  カーネルを起動する */

start_6:
	jmp	@_kernel_start


	.ALIGN 4
_hardware_init_hook_k:
	.DATA.L   _hardware_init_hook
_software_init_hook_k:
	.DATA.L   _software_init_hook


_bss_start_k     .DATA.L   STARTOF B
_end_k	         .DATA.L   STARTOF B   +   SIZEOF B
__idata_start_k  .DATA.L   STARTOF D
__idata_end_k    .DATA.L   STARTOF D   +   SIZEOF D
__data_start_k   .DATA.L   STARTOF R

	.END
