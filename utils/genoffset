#! /usr/bin/perl
#
#  TOPPERS/JSP Kernel
#      Toyohashi Open Platform for Embedded Real-Time Systems/
#      Just Standard Profile Kernel
# 
#  Copyright (C) 2000,2001 by Embedded and Real-Time Systems Laboratory
#                              Toyohashi Univ. of Technology, JAPAN
# 
#  上記著作権者は，Free Software Foundation によって公表されている 
#  GNU General Public License の Version 2 に記述されている条件か，以
#  下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェア（本ソフトウェ
#  アを改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
#  利用と呼ぶ）することを無償で許諾する．
#  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#      スコード中に含まれていること．
#  (2) 本ソフトウェアを再利用可能なバイナリコード（リロケータブルオブ
#      ジェクトファイルやライブラリなど）の形で利用する場合には，利用
#      に伴うドキュメント（利用者マニュアルなど）に，上記の著作権表示，
#      この利用条件および下記の無保証規定を掲載すること．
#  (3) 本ソフトウェアを再利用不可能なバイナリコードの形または機器に組
#      み込んだ形で利用する場合には，次のいずれかの条件を満たすこと．
#    (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
#        権表示，この利用条件および下記の無保証規定を掲載すること．
#    (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
#        こと．
#  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#      害からも，上記著作権者を免責すること．
# 
#  本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
#  本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
#  ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
#  かなる損害に関しても，その責任を負わない．
# 
#  @(#) $Id: genoffset,v 1.9 2002/04/08 05:28:34 hiro Exp $
# 

#
#  ビットサーチ
#
sub search_bit {
	my($val) = @_;
	my($val_bit);

	return(-1) if ($val == 0);

	$val_bit = 0;
	while (($val & 1) == 0) {
		$val >>= 1;
		$val_bit++;
	}
	return($val_bit);
}

#
#  オフセット値の出力
#
sub parse_begin {
	while ($line = <>) {
		chop $line;

		return if ($line =~ /! END/);
		if ($line =~ /^([^ \t]+) = [#\$]?([^ \t]+)/) {
			printf "#define %s\t%d\n",$1,$2;
		}
	}
}

#
#  解釈できるディレクティブのテーブル
#
%directives = (
	"long", "",
	"word", "",
	"int", "",
	"short", "",
	"value", "",
	"byte", "",
	"data32", 4,
	"data16", 2,
	"data8", 1,
	"zero", -1,
	"space", -1,
	"globl", 0,
	"global", 0,
	"align", 0,
	"data", 0,
	"stabs", 0,
	"type", 0,
	"size", 0,
	"section", 0,
	"sdata", 0,
);

#
#  ビット位置の出力
#
sub parse_bit {
	my($endian, $size) = @_;
	my($offset, $dir, $val, $val_bit);

	$offset = 0;
	while ($line = <>) {
		chop $line;

		next if ($line =~ /^[ \t]*[#;].*$/);
		return if ($line =~ /! END/);

		if ($line =~ /^([^ \t]+):/) {
			$label = $1;
		}
		elsif ($line =~ /[ \t]*\.([a-zA-Z0-9]+)[ \t]*([^ \t]*)$/
				&& defined($dir = $directives{$1})) {
			$val = $2;

			# 16進数と8進数の数値への変換処理
			if ($val =~ /^0x(.+)$/) {
				$val = hex($1);
			}
			elsif ($val =~ /^0(.+)$/) {
				$val = oct($1);
			}

			if ($dir eq "") {
				# サイズを知らないディレクティブ
				print STDERR "genoffset: unknown directive: ",
						"$line\n";
				$error = 1;
			}
			elsif ($dir == 0) {
				# 読み飛ばすべきディレクティブ
				next;
			}
			elsif ($dir == -1) {
				# .zero ディレクティブの処理
				$offset += $val;
				next;
			}
			elsif ($val == 0) {
				# 値が 0 のフィールドの処理
				$offset += $dir;
				next;
			}

			# ビット位置を探す
			$val_bit = do search_bit($val);

			# バイト単位に換算する
			if ($endian eq "B") {
				$offset += $dir - 1;
				$offset -= $val_bit >> 3;
			}
			else {
				$offset += $val_bit >> 3;
			}
			$val_bit &= 0x07;

			# 出力単位に換算する
			if ($size eq "W") {
				if ($endian eq "B") {
					$val_bit += 24;
					$val_bit -= ($offset & 0x03) << 3;
				}
				else {
					$val_bit += ($offset & 0x03) << 3;
				}
				$offset &= ~0x03;
			}
			elsif ($size eq "H") {
				if ($endian eq "B") {
					$val_bit += 8;
					$val_bit -= ($offset & 0x01) << 3;
				}
				else {
					$val_bit += ($offset & 0x01) << 3;
				}
				$offset &= ~0x01;
			}
			last;
		}
		else {
			# 解析できない行
			print STDERR "genoffset: cannot parse: $line\n";
			$error = 1;
		}
	}

	# END まで読み飛ばす
	while ($line = <>) {
		chop $line;
		last if ($line =~ /! END/);
	}

	# 定義の出力
	$label =~ s/^_//;
	printf "#define %s\t%d\n",$label,$offset;
	printf "#define %s_bit\t%d\n",$label,$val_bit;
	printf "#define %s_mask\t0x%x\n",$label,(1 << $val_bit);
}

#
#  ディレクティブの読み取り
#
sub ref_bit {
	my($size, $dir, $directive);

	while ($line = <>) {
		chop $line;

		next if ($line =~ /^[ \t]*[#;].*$/);
		return if ($line =~ /! END/);

		if ($line =~ /^_?ref_([0-9]+):/) {
			$size = $1;
		}
		elsif ($line =~ /[ \t]*\.([a-zA-Z0-9]+)[ \t]*([^ \t]*)$/
				&& defined($dir = $directives{$1})) {
			$directive = $1;
			if ($dir eq "") {
				# 登録すべきディレクティブ
				$directives{$directive} = $size;
			}
		}
		else {
			# 解析できない行
			print STDERR "genoffset: cannot parse: $line\n";
			$error = 1;
		}
	}
}

#
#  メインルーチン
#
print "/* This file is generated by genoffset. */\n";
print "\n";

$error = 0;
while ($line = <>) {
	chop $line;

	if ($line =~ /! BEGIN/) {
		do parse_begin();
	}
	elsif ($line =~ /! BIT_REF/) {
		do ref_bit();
	}
	elsif ($line =~ /! BIT_([BL])([BHW])/) {
		do parse_bit($1, $2);
	}
}
exit($error);
