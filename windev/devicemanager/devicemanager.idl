/*
 *  TOPPERS/JSP Kernel
 *      Toyohashi Open Platform for Embedded Real-Time Systems/
 *      Just Standard Profile Kernel
 * 
 *  Copyright (C) 2000-2002 by Embedded and Real-Time Systems Laboratory
 *                              Toyohashi Univ. of Technology, JAPAN
 * 
 *  上記著作権者は，Free Software Foundation によって公表されている 
 *  GNU General Public License の Version 2 に記述されている条件か，以
 *  下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェア（本ソフトウェ
 *  アを改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
 *  利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを再利用可能なバイナリコード（リロケータブルオブ
 *      ジェクトファイルやライブラリなど）の形で利用する場合には，利用
 *      に伴うドキュメント（利用者マニュアルなど）に，上記の著作権表示，
 *      この利用条件および下記の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを再利用不可能なバイナリコードの形または機器に組
 *      み込んだ形で利用する場合には，次のいずれかの条件を満たすこと．
 *    (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
 *        権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
 *        こと．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者を免責すること．
 * 
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
 *  本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
 *  ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
 *  かなる損害に関しても，その責任を負わない．
 * 
 *  @(#) $Id: devicemanager.idl,v 1.3 2002/04/10 11:27:26 takayuki Exp $
 */

import "oaidl.idl";
import "ocidl.idl";

	[
		object,
		uuid(0FDFFA99-68D5-4BE0-8984-FB6A3A2C0AAC),
		helpstring("IInformation Interface"),
		pointer_default(unique)
	]
	interface IInformation : IUnknown
	{
	};

	[
		object,
		uuid(6575FAAB-8750-42D2-ADDD-4BE764AA2767),	
		helpstring("IDevice Interface"),
		pointer_default(unique)
	]
	interface IDevice : IUnknown
	{
		[helpstring("Method IsValid")] HRESULT IsValid([out]BOOL * valid);
		[helpstring("Method SetDeviceName")] HRESULT SetDeviceName([in]BSTR devname);
		[helpstring("Method Map")] HRESULT Map([in]unsigned long address, [in]unsigned long size);
		[helpstring("Method Unmap")] HRESULT Unmap([in]unsigned long address);
		[helpstring("Method RaiseInterrupt")] HRESULT RaiseInterrupt([in]unsigned long inhno);
	};

	[
		uuid(DA93137D-FB52-4421-B95D-9077340AD03B),
		helpstring("_IDeviceEvents Interface")
	]
	interface _IDeviceEvents : IUnknown
	{
		[helpstring("Method OnRead")] HRESULT OnRead([in]long address, [in]long sz, [out,size_is(sz),length_is(sz)] byte data []);
		[helpstring("Method OnWrite")] HRESULT OnWrite([in]long address, [in]long sz, [in,size_is(sz),length_is(sz)] byte data []);
		[helpstring("Method OnKernelStart")] HRESULT OnKernelStart();
		[helpstring("Method OnKernelExit")] HRESULT OnKernelExit();
	};

	[
		object,
		uuid(D3E42099-3FDD-4A78-BDBD-4E57D362F5ED),
		helpstring("IKernel Interface"),
		pointer_default(unique)
	]
	interface IKernel : IUnknown
	{
		[helpstring("Method Read")] HRESULT Read([in]unsigned long address, [in] unsigned long sz, [out,size_is(sz),length_is(sz)] byte data []);
		[helpstring("Method IsValid")] HRESULT IsValid([out]BOOL * valid);
		[helpstring("Method Write")] HRESULT Write([in]unsigned long address, [in]unsigned long sz, [in,size_is(sz),length_is(sz)] byte data []);
	};


	[
		uuid(1353969D-E84F-463F-B211-337E9BCFB99E),
		helpstring("_IKernelEvents Interface")
	]
	interface _IKernelEvents : IUnknown
	{
		[helpstring("Method OnInterruptRequest")] HRESULT OnInterruptRequest([in]unsigned long inhno);
	};

	[
		uuid(11E125BE-FC60-4DC9-8393-DC393B556D06),
		helpstring("_IInformationEvents Interface")
	]
	interface _IInformationEvents : IUnknown
	{
		[helpstring("Method OnDeviceChanged")] HRESULT OnDeviceChanged(short reason, long devid, long extra);
		[helpstring("Method OnKernelChanged")] HRESULT OnKernelChanged(short reason);
	};

[
	uuid(F15F5272-83F3-42C3-874C-E4FF2B904AC2),
	version(1.0),
	helpstring("Toppers JSP on Windows DeviceManager 1.0 Type Library")
]
library ATLDEVICEMANAGERLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(FEE2A68B-7F98-40E0-9853-183EE68BC7F8),
		helpstring("Device Class")
	]
	coclass Device
	{
		[default] interface IDevice;
		[default, source] interface _IDeviceEvents;
	};


	[
		uuid(D7AAF617-008A-4961-BB51-041CFD490ED3),
		helpstring("Information Class")
	]
	coclass Information
	{
		[default] interface IInformation;
		[default, source] interface _IInformationEvents;
	};


	[
		uuid(51789667-9F20-40AF-AF7F-9856325DFB0B),
		helpstring("Kernel Class")
	]
	coclass Kernel
	{
		[default] interface IKernel;
		[default, source] interface _IKernelEvents;
	};
};
