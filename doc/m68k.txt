
	    ＝ TOPPERS/JSPカーネル ユーザズマニュアル ＝
		    （68040 ターゲット依存部）

	    （Release 1.0β対応，最終更新: 15-Nov-2000）

------------------------------------------------------------------------ 
 TOPPERS/JSP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     Just Standard Profile Kernel

 Copyright (C) 2000 by Embedded and Real-Time Systems Laboratory
                             Toyohashi Univ. of Technology, JAPAN

 上記著作権者は，以下の条件を満たす場合に限り，本ソフトウェア（本ソ
 フトウェアを改変したものを含む．以下同じ）を使用・複製・改変・再配
 布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
     権表示，この利用条件および下記の無保証規定が，そのままの形でソー
     スコード中に含まれていること．
 (2) 本ソフトウェアをバイナリコードの形または機器に組み込んだ形で利
     用する場合には，次のいずれかの条件を満たすこと．
   (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
       権表示，この利用条件および下記の無保証規定を掲載すること．
   (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
       こと．
 (3) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
     害からも，上記著作権者を免責すること．

 本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
 本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
 ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
 かなる損害に関しても，その責任を負わない．

 @(#) $Id: m68k.txt,v 1.2 2000/11/14 15:48:31 hiro Exp $
------------------------------------------------------------------------


１．68040 ターゲット依存部の概要

1.1 ターゲットシステムと開発環境

68040プロセッサのターゲットシステムとしては，(株)電産製の DVE-68K/40
CPUボード（CPU: 68LC040）のみをサポートしている．

開発環境には，GCC などの GNU開発環境を用い，オブジェクトファイルフォー
マットは ELF を標準とする．

1.2 サポートする機能の概要

68040依存の機能として，割込みマスクの変更・参照（chg_ixx，get_ixx）を
サポートしている．また，DVE-68K/40 CPUボード依存の機能として，性能評価
用システム時刻参照機能（vxget_tim）をサポートしている．割込みの禁止と
許可（dis_int，ena_int）はサポートしていない．

1.3 他のターゲットへのポーティング

現バージョンでは，FPU を持たない 68LC040 のみをサポートしている．FPU 
を用いない場合には，FPU内蔵の 68040 にも適用可能なはずである．FPUを活
用したい場合には，ディスパッチャで FPUレジスタを保存／復帰する必要があ
るなど，若干の改造が必要である．

他の m68k 系列のプロセッサへのポーティングについては，マスタースタック
と別に割込みスタックを持つ 68020 以降のプロセッサへは比較的容易にポー
ティング可能と思われるが，それより前のプロセッサへのポーティングは面倒
であると予想される．


２．68040 プロセッサ依存部の機能

この節では，カーネルおよびシステムサービスの機能の中で，68040依存の部
分について解説する．

2.1 データ型

signed int型および unsigned int型のサイズは 32ビットである．

2.2 割込み管理機能と割込みハンドラ

カーネル管理外の割込みは NMI のみである．よって，CPUロック状態や初期化
ルーチン内では，NMI 以外の割込みはすべて禁止されている．具体的には，
IPM（Interrupt Priority Mask）が 7 に設定される．

DEF_INH で指定する割込みハンドラ番号（inhno）は，68040 での例外ベクタ
番号を表し，そのデータ型（INHNO）は unsigned int型に定義されている．
DEF_INH で，例外ベクタ番号として有効でない値や，外部割込みに対応しない
番号を指定した場合の動作は保証されない．

68040依存の機能として，SR（Status Register）中の IPM（Interrupt
Priority Mask）の値を変更するためのサービスコール chg_ipm と，参照する
ためのサービスコール get_ipm をサポートしている．なお，IPM の値を表す
データ型 IPM は，unsigned int型に定義されている．

これらのサービスコールは，タスクコンテキストで CPUロック解除状態の場合
にのみ呼び出すことができる．chg_ipm により IPM を 0 以外（すなわち，何
らかの割込みが禁止されている状態）にした場合でも，ディスパッチは禁止さ
れず，chg_ipm により変更した IPM の値は，ディスパッチ後のタスクに引き
継がれる．例えば，あるタスクで IPM を 1 に変更した後，何らかの割込みに
より別のタスクに切り替わると，切り替わった後のタスクでも IPM は 1 にな
る．

chg_ipm をサポートするために，割込みハンドラの出入口処理などにオーバヘッ
ドを生じている．そこで，SUPPORT_CHG_IPM というマクロにより，これらのサー
ビスコールをサポートするかどうかを切り替えられるようにしている．
SUPPORT_CHG_IPM は，cpu_config.h の中で #define されている．

68040依存の割込みマスクの変更・参照のためのサービスコールの仕様は次の
通り．

(1) chg_ipm			割込みマスクの変更

【C言語API】
	ER ercd = chg_ipm(IPM ipm);

【パラメータ】
	IPM	ipm		設定すべき IPM の値

【リターンパラメータ】
	ER	ercd		エラーコード

【エラーコード】
	E_CTX		コンテキストエラー
	E_PAR		パラメータエラー（ipm が不正）

【機能】

IPM（Interrupt Priority Mask）を ipm で指定された値に設定する．指定し
た値が 0〜6 以外の場合，E_PARエラーとなる．IPM を 1〜6 に設定した場合
でも，ディスパッチは禁止されない．また，設定した IPM の値は，ディスパッ
チ禁止後も引き継がれる．

なお，このサービスコールを用いて，IPM を 7 （すべての割込みを禁止）に
設定することはできない．IPM を 7 にしたい場合には，loc_cpu を使うべき
である．

このサービスコールは，タスクコンテキストで CPUロック状態解除の時のみ呼
び出すことができる．非タスクコンテキストや CPUロック状態で呼び出した場
合には，E_CTXエラーとなる．

(2) get_ipm			割込みマスクの参照

【C言語API】
	ER ercd = get_ipm(IPM *p_ipm);

【パラメータ】
	なし

【リターンパラメータ】
	ER	ercd		エラーコード
	IPM	ipm		現在の IPM の値

【エラーコード】
	E_CTX		コンテキストエラー

【機能】

現在の IPM（Interrupt Priority Mask）の値を読み出し，ipm に返す．

このサービスコールは，タスクコンテキストで CPUロック状態解除の時のみ呼
び出すことができる．非タスクコンテキストや CPUロック状態で呼び出した場
合には，E_CTXエラーとなる．

2.3 CPU例外管理機能とCPU例外ハンドラ

DEF_EXC で指定する割込みハンドラ番号（excno）は，68040 での例外ベクタ
番号を表し，そのデータ型（EXCNO）は unsigned int型に定義されている．
DEF_EXC で，例外ベクタ番号として有効でない値や，CPU例外に対応しない番
号を指定した場合の動作は保証されない．

2.4 スタートアップモジュール

68040依存のスタートアップモジュール（start.S）では，次の初期化処理を行
う．

(A) プロセッサモードの初期化とスタックポインタの初期化

最初に，すべてのキャッシュを無効化した後，コードキャッシュとデータキャッ
シュを共に有効にする．また，プロセッサのモードを，スーパバイザモード・
割込みモードに設定し，NMI 以外のすべての割込みを禁止する．スタートアッ
プモジュールは，スーパバイザモードで起動しなければならないので，ここで
スーパバイザモードに設定するのは，本当はムダである．

次に，割込みスタックポインタ（SPI）を STACKTOP に設定する．ここで割込
みスタックポインタに設定されたスタック領域は，カーネル起動後は非タスク
コンテキスト用のスタック領域として使われる．STACKTOP は，sys_config.h 
部で定義することを想定している．また，フレームポインタを 0 に初期化す
る．

(B) hardware_init_hook の呼出し

hardware_init_hook が 0 でない場合には，hardware_init_hook を呼び出す．
hardware_init_hook は，カーネルが起動される前に行う必要があるターゲッ
ト依存の初期化を行うために用意している．hardware_init_hook がどこでも
定義されていない場合，リンカでこのシンボルを 0 に定義する（リンカスク
リプト内に記述あり）．

(C) bssセクションと dataセクションの初期化

bssセクションをゼロクリアする．また，dataセクションを初期化する．

(D) software_init_hook の呼出し

software_init_hook が 0 でない場合には，software_init_hook を呼び出す．
software_init_hook は，カーネルが起動される前に行う必要があるソフトウェ
ア環境（具体的には，ライブラリ）依存の初期化を行うために用意している．
software_init_hook がどこでも定義されていない場合，リンカでこのシンボ
ルを 0 に定義する（リンカスクリプト内に記述あり）．

(E) カーネルの起動

kernel_start へ分岐し，カーネルを起動する．kernel_start からリターンし
てくることは想定していない．


３．DVE-68K/40 システム依存部の機能

3.1 システムクロックドライバ

システムクロックドライバが isig_tim を呼び出す周期は，sys_defs.h 中の 
TIC_NUME と TIC_DENO で定義されている（標準は 1ミリ秒周期）．この定義
を変更することで，isig_tim を呼び出す周期を変更することができる．ただ
し，タイマの精度が 1μ秒であるため，1μ秒単位で端数になる値を設定した
場合には，isig_tim の呼出し周期に誤差が生じることになる．

3.2 性能評価用システム時刻参照機能

DVE-68K/40依存部では，性能評価用システム時刻参照機能（vxget_tim）をサ
ポートしている．性能評価用システム時刻の精度は 1μ秒単位であるが，タイ
マの現在値を読み出すために一時的にタイマを停止させる必要があるため，
vxget_tim を呼ぶ度にシステムクロックが少しづつ遅れることになる．なお，
SYSUTIM型は UD型（64ビットの符号無し整数型）に定義している．

3.3 シリアルインタフェースドライバ

DVE-68K/40依存部のシリアルインタフェースドライバは，DVE-68K/40 CPUボー
ドの2つのシリアルインタフェースをサポートしている．ポートID=1 がポート
A，ポートID=2 がポートB に対応している．デフォルトのシリアルポートは，
ポートB に設定している（ポートA はスタブまたは ROMモニタで使用するため）．

3.4 メモリマップ

DVE-68K/40依存部では，CPUボード上のメモリが 4MB の場合を想定し，コード
領域を 0x10000〜0xfffff の約1MB，データ領域を 0x100000〜 の約3MB，非タ
スクコンテキスト用のスタック領域を 〜0x3fffff に確保している．0〜
0xffff の 64KB は，ROMモニタまたはスタブのワークエリアとなっており，使
用することができない．


４．開発環境の構築

4.1 開発環境の概要

カーネルをインストールするには，JSPカーネルの配布キットに含まれる以外
に，以下のツールおよびライブラリが必要である．

    GNU開発環境
	GCC-CORE（Cコンパイラ．動作確認は 2.95.2）
	BINUTILS（アセンブラ，リンカなど．動作確認は 2.10）
	NEWLIB（標準Cライブラリ．動作確認は 1.8.1）
    perl（動作確認は 5.005）
    GNU Make（動作確認は 3.77）

アプリケーションが標準Cライブラリを使用しない場合には NEWLIB は無くて
もよいが，GCC をインストールする際に NEWLIB があった方が都合がよいため，
NEWLIB も含めてインストールする方法を標準とする．

4.2 開発環境の構築方法

上記の開発環境は，すべてフリーのソースコードから構築することができる．
この節では，UNIXマシン（動作確認は Linux）上で開発環境を構築する手順を
説明する．

(1) 準備作業

準備作業として，ホスト上に必要なツールをインストールする．具体的には，
perl と GNU Make（以下の説明では makeコマンドが GNU Make であるものと
する）のインストールが必要である．さらに，開発環境の構築に使うために，
ホスト上にも最新の GCC をインストールしておくことが望ましい．

なお，JSPカーネルの配布キットに含まれる perlスクリプトは，perl のプロ
グラムが /usr/bin/perl にあるものと仮定して記述している．perl のプログ
ラムのパスがこれと異なる場合は，各 perlスクリプトの先頭の perl の絶対
パスを修正する必要がある．

(2) ディレクトリの決定

開発環境を構築するために，以下のディレクトリを用意する．

    <PREFIX>		開発環境をインストールするディレクトリ
    <BINUTILS-SRCDIR>	BINUTILS のソースを展開するディレクトリ
    <BINUTILS-OBJDIR>	BITUTILS のオブジェクトを生成するディレクトリ
    <GCC-SRCDIR>	GCC-CORE のソースを展開するディレクトリ
    <GCC-OBJDIR>	GCC-CORE のオブジェクトを生成するディレクトリ
    <NEWLIB-SRCDIR>	NEWLIB のソースを展開するディレクトリ
    <NEWLIB-OBJDIR>	NEWLIB のオブジェクトを生成するディレクトリ

(3) BINUTILS のインストール（2.10）

次の手順に従って，BINUTILS をインストールする．

    % cd <BINUTILS-OBJDIR>
    % <BINUTILS-SRCDIR>/configure \
		--target=m68k-unknown-elf \
		--prefix=<PREFIX>
    % make
    % make install

(4) GCC-CORE のインストール（2.95.2）

次の手順に従って，GCC-CORE をインストールする．

    % mkdir <GCC-OBJDIR>
    % cd <GCC-OBJDIR>
    % <GCC-SRCDIR>/configure \
		--target=m68k-unknown-elf \
		--prefix=<PREFIX> \
		--with-gnu-as --with-gnu-ld --with-newlib \
		--with-headers=<NEWLIB-SRCDIR>/newlib/libc/include
    % make
    % make install

(5) NEWLIB のインストール（1.8.1）

次の手順に従って，NEWLIB をインストールする．

    % mkdir <NEWLIB-OBJDIR>
    % cd <NEWLIB-OBJDIR>
    % <NEWLIB-SRCDIR>/configure \
		--target=m68k-unknown-elf \
		--prefix=<PREFIX>
    % make
    % make install

4.3 Windows上での開発環境

Cygwin を用いることで，上記の開発環境を Windows上にインストールするこ
とができる．具体的には，BINUTILS，GCC-CORE，NEWLIB をインストールする
前に，Cygwin をインストールする．Cygwin と perl のインストール時の注意
事項は次の通り．

(1) Cygwinのインストール（1.1.4）

Cygwin は，http://sourceware.cygnus.com や Ring Server
（http://www.ring.gr.jp）などからダウンロードすることができる．Cygwin
をインストールしたら，以下のコマンドを実行して，シリアルインタフェース
を RAWデバイスとして使えるようにする．

    % mkdir /dev	
    % mount \\.\com1 /dev/com1
    % mount \\.\com2 /dev/com2

(2) perl のインストール（5.6.0）

Cygwin環境用の perl が，http://cygutils.netpedia.net/V1.1 の
perl-5.6.0.cygwin1.1.tar.bz2 にある．これをダウンロードし，以下の手順
でインストールする．

    % cd /
    % bunzip2 perl-5.6.0.cygwin1.1.tar.bz2
    % tar xvf perl-5.6.0.cygwin1.1.tar
    % ln -s /usr/local/bin/perl /usr/bin/perl


５．その他

5.1 ディレクトリ・ファイル構成

68040 ターゲット依存部の各ファイルの概要は次の通り．

    config/m68k/
	Makefile.config	Makefileの68040依存定義
	cpu_defs.h	プロセッサ依存部のアプリケーション用定義
	cpu_config.h	プロセッサ依存部の構成定義
	cpu_config.c	プロセッサ依存部の関数
	cpu_support.S	プロセッサ依存部のサブルーチン
	cpu_context.h	コンテキスト操作
	makeoffset.c	offset.h 生成サポートプログラム
	cpu_insn.h	低レベルのプロセッサ操作ルーチン
	start.S		スタートアップモジュール
	m68kelf.ld	リンカスクリプト

    config/m68k/dve68k/
	Makefile.config	MakefileのDVE-68K/40依存定義
	sys_defs.h	システム依存部のアプリケーション用定義
	sys_config.h	システム依存部の構成定義
	sys_config.c	システム依存部の関数
	sys_support.S	システム依存部のサブルーチン
	hw_timer.h	タイマ操作ルーチン
	hw_serial.h	シリアルインタフェースデバイス操作ルーチン
	dve68k.h	DVE-68K/40 ハードウェア定義

5.2 ターゲットへのダウンロードと実行

ユーザズマニュアルの手順にしたがって，JSPカーネルおよびアプリケーショ
ンプログラムが構築できると，ターゲットシステムへダウンロードして実行す
る必要がある．ダウンロードと実行の方法には，ROMモニタを用いる方法と，
gdb＋スタブを用いる方法がある．

(A) ROMモニタを用いる方法

ターゲットシステムが ROMモニタを持っている場合には，バイナリ形式または
モトローラ S形式のファイルを，ROMモニタのダウンロードコマンドを使って
ダウンロードし，実行コマンドを使ってダウンロードした番地から実行すれば
よい．

DVE-68K/40 CPUボードの場合，別売りの ROMモニタとそれに対応した端末ソフ
トを用いると，R コマンドでバイナリ形式のファイルをダウンロードすること
ができる．

    #R 10000
    \up jsp.bin

プログラムの実行は，g コマンドで行う．

    #g 10000

(B) スタブを用いる方法

JSPカーネルと一緒に使えるように改造したスタブのソースは，JSPカーネルの
ウェブサイトからダウンロードすることができる．スタブをダウンロードした
ら，READMEファイルに従ってスタブを構築し，ROM またはフラッシュメモリに
書き込む．

gdb＋スタブを用いてプログラムをダウンロード・実行する手順は次の通り．

    % m68k-unknown-elf-gdb jsp
    GNU gdb 4.18
    Copyright 1998 Free Software Foundation, Inc.
    .......... 以下メッセージが続く ..........
    (gdb) 

gdb が起動したら，次のコマンドを実行して，ターゲットシステムと接続する．

    (gdb) set remotebaud 38400
    (gdb) target remote /dev/ttyXX

/dev/ttyXX には，ターゲットシステムを接続しているシリアルポートのデバ
イス名を指定する．次に，load コマンドにより，プログラムをダウンロード
する．

    (gdb) load

プログラムの実行は，continue コマンドで行う．

    (gdb) continue

プログラムを実行中に NMI をかける（DVE-68K/40 CPUボードでは，ABORTスイッ
チを押す）ことで，プログラムを停止させて，gdb に制御を戻すことができる．

以上
