
	    ＝ TOPPERS/JSPカーネル ユーザズマニュアル ＝
    		    （H8S ターゲット依存部）

	    （Release 1.3 対応，最終更新: 13-Apr-2001）

------------------------------------------------------------------------
 TOPPERS/JSP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     Just Standard Profile Kernel

 Copyright (C) 2000-2002 by Embedded and Real-Time Systems Laboratory
                             Toyohashi Univ. of Technology, JAPAN
 Copyright (C) 2001,2002 by Dep. of Computer Science and Engineering
                    Tomakomai National College of Technology, JAPAN
 Copyright (C) 2001,2002 by Industrial Technology Institute,
                             Miyagi Prefectural Government, JAPAN

 上記著作権者は，Free Software Foundation によって公表されている
 GNU General Public License の Version 2 に記述されている条件か，以
 下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェア（本ソフトウェ
 アを改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
 利用と呼ぶ）することを無償で許諾する．
 (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
     権表示，この利用条件および下記の無保証規定が，そのままの形でソー
     スコード中に含まれていること．
 (2) 本ソフトウェアを再利用可能なバイナリコード（リロケータブルオブ
     ジェクトファイルやライブラリなど）の形で利用する場合には，利用
     に伴うドキュメント（利用者マニュアルなど）に，上記の著作権表示，
     この利用条件および下記の無保証規定を掲載すること．
 (3) 本ソフトウェアを再利用不可能なバイナリコードの形または機器に組
     み込んだ形で利用する場合には，次のいずれかの条件を満たすこと．
   (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
       権表示，この利用条件および下記の無保証規定を掲載すること．
   (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
       こと．
 (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
     害からも，上記著作権者を免責すること．

 本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
 本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
 ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
 かなる損害に関しても，その責任を負わない．

 @(#) $Id: h8s.txt,v 1.3 2002/04/13 13:13:01 imai Exp $
------------------------------------------------------------------------


　　このドキュメントでは、TOPPERS/JSPカーネル H8S版について解説する。



1．H8Sターゲット依存部の概要

1.1　ターゲットシステムと開発環境
	H8Sプロセッサのターゲットシステムは、H8S/2350を搭載した以下のボ
　　　ードをサポートしている。
　　　　　　　・株式会社 ミスポ MISPO H8S/2350 EVA
	開発環境には、日立エンジニアリング株式会社製のH8S･H8/300シリー
　　　ズC/C++コンパイラ（V3.0A)を用いている。

1.2　サポートする機能の概要
	性能評価用システム時刻参照機能(vxget_tim)，割込みマスクの変更･参
　　　照(chg_ipm,get_ipm)はサポートしているが，割込みの禁止と許可(dis_int,
　　　ena_int)は現時点ではサポートしていない。(2.2.4及び3.2参照。)

1.3　他のターゲットへのポーティング
	H8Sシリーズであれば、ポーティングは容易に出来ると思われるが、
　　　H8S/2350以外は調査していない。

1.4　シリアルポート(SCI)
	H8S/2350はSCI0とSCI1の2本のシリアルポートがあり、sys_config.hに
　　　定義しているNUM_PORTにより何本使用するか指定できるが、現在の実装で
　　　は、1本のみ使用出来る。JSPカーネルのログ出力用には、SCI0を使用して
　　　いる。シリアルポートの設定を以下に示す。
		・ボーレイト：9600[bps]
		・データ長　：8ビット
		・ストップビット：1ビット
		・パリティなし



2．H8Sプロセッサ依存部の機能

2.1　データ型
	int型及びunsigned int型のサイズは、16ビットである。（H8S,H8/300
　　　シリーズC/C++コンパイラ（V3.0A)ではint型は16ビット固定であり、コン
　　　パイルオプションによって、32ビットに変更することはできない。）
　　　　ポインタのサイズは、32ビットである。
　　　　　　　・VP_INT：32ビット
　　　　　　　・VP：32ビット
　　　　　int型のサイズとポインタのサイズが異なる点は、注意が必要である。
　　　　  例えば、タスクの拡張情報は、VP_INT型で渡すので、int型で渡した場
　　　　合には、エラーとなる。
　　　
　　　　　また、64ビット整数型は使用できないために、以下のデータ型は使用
　　　　できない。
　　　　　　　・D(符号付き64ビット整数)
　　　　　　　・UD(符号無し64ビット整数)
　　　　　　　・VD(データタイプが定まらない64ビットの値)

2.2　割込み管理機能と割込みハンドラ
	カーネル管理外の割込みはNMIのみである。CPUロック状態や初期化ルー
　　　チン内ではNMI以外の割込みは全て禁止される。具体的には、IPM(Interrupt 
　　　Priority Mask)が7に設定される。

2.2.1　割込み制御モード
	H8S/2350では、モード0とモード2の2つの割込み制御モードを選択できる
　　　が、現段階では、モード2のみをサポートしている。

2.2.2　ベクタテーブルの記述方法
	H8S/2350では、ベクタテーブルは固定であり、ROM領域に例外処理ベクタ
　　　テーブルを配置している。そのために、例外処理の入口処理のラベルは、
     sys_support.src内に直接書き込む必要がある。例外処理の入口処理のラベ
     ルの名は，以下のように設定する必要がある。
　　　　　　　・例外処理のC言語ルーチン名　：　*******
　　　　　　　・例外処理の入り口処理のラベル名　：　_*******_entry
	具体的には、SCI(シリアルコミュニケーションインターフェース）の割込
      みにおいて、割込みのC言語ルーチン名が、serial_in_handlerである場合、
      ベクタテーブルに記述するその入口処理のラベル名は、
      _serial_in_handler_entryとする必要がある。
	また、ROM領域にある例外処理ベクタテーブルの内容を動的に変更するた
　　　めには、特別の方法が必要であるために、　割込みハンドラの設定関数
　　　define_inhとCPU例外ハンドラの設定関数define_excは、何もしない関数と
　　　なっている。

2.2.4　割込みマスク変更･参照のためのサービスコールについて
	   1.2にも記載したように、H8S依存の機能として、割込み制御モードがモー
	ド2の場合に、EXR(エクステンドレジスタ)中の割込みマスクビット(I2〜I0)
         の値を変更するためのサービスコールchg_ipmと、参照するためのサービ
         スコールget_ipmをサポートしている。なお、割込みマスクビットの値を
         示すデータ型IPMは、UB(符号無し8ビット整数)に定義されている。
        　　これらのサービスコールは、タスクコンテキストでCPUロック解除状態
　　　　　の場合にのみ呼び出すことができる。chg_ipmによりIPMを0以外にした場
　　　　　合(何らかの割込みが禁止されている状態)でも、ディスパッチは禁止され
　　　　　ず、chg_ipmにより変更したIPMの値は、ディスパッチ後のタスクに引き継
　　　　　がれる。
	　　chg_ipmをサポートするために、割込みハンドラの出入り口処理などに
　　　　　オーバーヘッドを生じている。しかし、現段階では、これらのサービスコ
　　　　　ールを使用する場合にしか対応していない。今後は、SUPPORT_CHG_IPMと
　　　　　いうマクロを用意し、これらのサービスコールをサポートするかどうか切
　　　　　り替えられるようにしていく方針である。（SUPPORT_CHG_IPMは、
　　　　　cpu_config.hの中でマクロ定義しているが、このマクロ定義を外しても、
　　　　　現段階では、割込みハンドラの出入り口処理などのオーバーヘッドは改善
　　　　　されない。）
　　　　　　　H8S依存の割込みマスクの変更･参照のためのサービスコールの仕様は
　　　　　以下の通りである。

（1)chg_ipm		割込みマスクの変更
　　　　【C言語のAPI】
　　　　　　　　　ER ercd = chg_ipm(IPM ipm);
        【パラメータ】
　　　　　　　　　IPM　ipm	設定すべきIPMの値
　　　　【リターンパラメータ】
　　　　　　　　　ER　　ercd　　エラーコード
　　　　【エラーコード】
　　　　　　　　　E_CTX　　コンテキストエラー
　　　　　　　　　E_PAX　　パラメータエラー(ipmが不正)
　　　　【機能】
　　　　　　　IPM(Interrupt Priority Mask)をipmで指定した値に設定する。指定
　　　　　　し値が0〜6以外の場合，E_PARエラーとなる。IPMを0以外(1〜MAX_IPM-1)
　　　　　　に設定した場合でも、ディスパッチは禁止されない。また、設定した
　　　　　　IPMの値は、ディスパッチ禁止後も引き継がれる。
　　　　　　　このサービスコールは、タスクコンテキストでCPUロック解除状態の
　　　　　　時のみ呼び出すことができる。非タスクコンテキストやCPUロック状態
　　　　　　で呼び出した場合には、E_CTXエラーとなる。
　　　　　　　なお、このサービスコールを用いて、IPMをMAX_IPM(全ての割込みを
　　　　　　禁止)に設定することはできない。IPMをMAX_IPMにしたい場合には、
　　　　　　loc_cpuを使用すべきである。
　　　　　　
(2)get_ipm		割込みマスクの参照
　　　　【C言語のAPI】
　　　　　　　　　ER ercd = get_ipm(IPM *p_ipm);
        【パラメータ】
　　　　　　　　　なし
　　　　【リターンパラメータ】
　　　　　　　　　ER　ercd   エラーコード
　　　　　　　　　IPM　ipm   現在のIPMの値
　　　　【エラーコード】
　　　　　　　　　E_CTX　　　コンテキストエラー
　　　　【機能】
　　　　　　　現在のIPM(Interrupt Priority Mask)の値を読み出し、ipmに返す。
　　　　　　このサービスコールは、タスクコンテキストでCPUロック解除状態のと
　　　　　　きのみ呼び出すことができる。非タスクコンテキストやCPUロック状態
　　　　　　で呼び出した場合には、E_CTXエラーとなる。

2.3　　スタートアップモジュール
	　H8S依存のスタートアップモジュール(start.src)は、次に示す初期化を実
　　　　行した後、カーネル(kernel_start)を起動する。但し、kernel_startから戻
　　　　ってくることは想定していない。
　　　　　　　　(1)　スタックポインタの設定
　　　　　　　　(2)　hardware_init_hookの呼び出し
　　　　　　　　　　　　　　hardware_init_hookが0でなければ、hardware_init_hook
　　　　　　　　　　　　　を呼び出す。hardware_init_hookはカーネルを起動する前
　　　　　　　　　　　　　に、ダーゲット依存のハードウェア的な初期化を行うため
　　　　　　　　　　　　　に用意されている。本実装では、割込み制御モードの設定
　　　　　　　　　　　　　、内蔵RAM無効の設定、バスコントローラのウエイトコン
　　　　　　　　　	　トロールレジスタ･バスコントロールレジスタの設定、I/O
		　　　　　ポートのバス制御信号出力端子の設定を行っている。
　　　　　　　　　　　　　hardware_init_hookがどこでも定義されていない場合には、
　　　　　　　　　　　　　このシンボルを0に定義する。
			  　(hardware_init_hookを自作する場合には、rtsリターン
　			　　　命令でなく、jmp命令でstart_1に戻る）
　　　　　　　　(3)　bssセクションの初期化
　　　　　　　　　　　　　　bssセクションの全領域を0クリアーする。
　　　　　　　　(4)　dataセクションの初期化
　　　　　　　　　　　　　　dataセクションを外部RAMに転送する。
　　　　　　　　(4)　software_init_hookの呼び出し
　　　　　　　　　　　　　　software_init_hookが0でなければ、software_init_hook
　                          を呼び出す。software_init_hookはカーネルを起動する
                            、ソフトウェア環境(ライブラリ等)依存の初期化を行た
　　　　　　　　　　　　　　めに用意されている。例えば、ライブラリの初期設定で
　　　　　　　　　　　　　　ある。software_init_hookがどこでも定義されていない
　　　　　　　　　　　　　　場合には、このシンボルを0に定義する。(start.src内
　　　　　　　　　　　　　　に記述あり)

2.4　割込み発生時のスタック消費量について
　　　　以下の理由により、各タスクスタックはタスク自身が使用する分に加えて最大
　　　　98バイト余分に用意する必要がある。
　　　　JSPカーネルでは、タスクスタックの他に割込みスタックを用意し、非タスク
　　　コンテキストは割込みスタックで実行される。
　　　　H8Sは割込み受付時に割込み禁止になる機構がハードウェアで用意されていな
　　　い。そのために、割込みの入口処理でソフトウェアによって割込み禁止にする必
　　　要がある。入口処理では、割込み禁止に移行するために(割込み許可の状態で）
　　　スタックにer0,er1を退避させる。(PC(プログラムカウンタ)，CCR(コンディショ
　　　ンコードレジスタ)，EXR(エクステンドレジスタ)は割込み受付時にハードウェア
　　　が自動的に退避を行う。)
　　　　このとき、多重割込みが発生すると割込みスタックに切り替える前に同様のフ
　　　レームがスタック上に生成される。H8Sは割込みが7段あるので、最悪のタイミン
　　　グで割込みが発生すると、スタックが98バイト消費される。
　　　　（er1(4バイト),er0(4バイト),EXR(1バイト),CCR(1バイト),
　　　　  リザーブ(1バイト),PC(3バイト〔アドバンスモードの場合〕),
　　　　　である。よって、14バイト×7セット=98バイト)



3　　システム依存部の機能

3.1　システムクロックドライバ
　　　　　システムクロックドライバがisig_timを呼び出す周期は、sys_def.h内の
　　　　TIC_NUMEとTIC_DENOで定義されており、デフォルトでは1m秒周期である。
　　　　この定義を変更することで、isig_timを呼び出す周期を変更できる。但し、
　　　　タイマの精度が1μ秒であるために、1μ秒単位で端数になる値を設定した場
　　　　合には、isig_timの呼出し周期に誤差が生じることになる。デフォルトでは
　　　　H8S内蔵タイマのチャネル0を使用している。

3.2　性能評価用システム時刻参照機能
　　　　　H8S依存部では、性能評価用システム参照機能(vxget_tim)をサポートして
　　　　いる。精度は1μ秒で、SYSUTIM型はUW型(32ビット符号なし整数型)である。
　　　　(64ビット符号なし整数型は使用できないため。2.1データ型を参照。)

3.3　シリアルインターフェースドライバ
　　　　　シリアルインターフェースドライバは、H8S内蔵のSCIのチャネル0をサポ
　　　　ートしており、カーネルのログ出力用に使用している。

3.4　メモリマップ
　　　　　メモリマップは以下のように設定している。
　　　　　　　0x000000 - 0x01ffff  :  コード領域(128kB)
　　　　　　　0x200000 -           :　データ領域(128kB)
		　　　　 0x21ffff  :  非タスクコンテキスト用のスタック領域
   	  内蔵RAMは、現在使用していないが、使用する場合には、hardware_init
　　　　　_hookの中で内蔵RAMを有効にする必要がある。(2.3 (2)を参照。)



4　　開発

4.1　開発環境
        開発環境には、日立エンジニアリング株式会社製のH8S，H8/300シリーズ
　　　C/C++コンパイラ（V3.0A)を用いている。
	また、デバッグのために、Watchpoint MultiSTAC H8S/2000,2600(Ver2.3.0)
　　　を使用している。
4.2　開発環境の構築
	CygwinとDOS窓を併用する。
　　　　　(ユーザーズマニュアル(user.txt)のサンプルプログラムの構築を参照。)
    　【Cygwinで実行】
	　以下、<OBJ>ディレクトリはアプリケーションをコンパイルする
	　作業ディレクトリを表す。
	　　1.サンプルプログラムの構築
                  %mkdir <OBJ>
                  %cd <OBJ>
                  %../configure -C h8s -S mispo_h8s -m
                    (-m：コンフィギュレータのmakeを行わない)
　　　　　　2.コンフィギュレータ(cfg.exe)の生成
	          次に、jsp/cfg内で
　　　　　　　　　%make -f Makefile.h8s-mispo_h8s  cfg
		　（日立コンパイラ用の、コンフィギュレーションチェッカーは
　　　　　　　　　　ない。）
    　【DOS窓で実行】
	　環境変数の設定例
　　　　　　　　path=c:\him\Tools\Hitachi\H8\3_0a_0\bin;D:\cygwin\bin;
　　　　　　　　D:\cygwin\usr\local\bin;D:\cygwin\bin;%path%
		set CH38=c:\him\Tools\Hitachi\H8\3_0a_0\include
		set CH38TMP=c:\tmp
		set H38CPU=2000a:24
		set HLNK_LIBRARY1=C:\him\Tools\Hitachi\H8\3_0a_0\lib\c8s26a.lib
		cd C:\him\Tools\Hitachi\H8\3_0a_0\jsp_h8s_hitachi\sample

　　　	　 3.DOSプロンプトによりコンパイルする
		  %cd <OBJ>
		  %make

4.3 Makefileの修正
	(ユーザーマニュアル(user.txt)の7.5Makefileの修正を参照。）

	　日立Cコンパイラでは、コンパイル用のコマンドラインオプションとア
　　　　センブル用のコンパイルオプションは別々に定義する必要がある。その
　　　　ために、H8S版では、コンパイルオプションの追加の際には、以下の変数
　　　　の定義を変更する。そのコンパイルオプションが特定のターゲットで常
　　　　に必要な場合には、jsp/config/h8s又はjsp/config/h8s/mispo_h8sディ
　　　　レクトリ内のMakefile.configを修正すべきである。
	
              【コンパイル･アセンブル共通オプション】
    		INCLUDE -iオプションを記述する
	　　　【コンパイルオプション】
　　　　　　　　CDEFS　 -defオプションを記述する
		CFLAGS　コンパイラに対するその他のオプションを記述する
	　　　【アセンブルオプション】
		ASMDEFS　-DEFオプションを記述する
		ASMFLAGS アセンブラに対するその他のオプションを記述する
	　　　【リンクオプション】
  		LDFLAGS　リンカに対するオプションを記述する
	　　　【ライブラリリンクオプション】
		LIBS　　 ライブラリリンクのためのオプションを記述する



5　制限事項

	　・動作確認の際には、ICEのエミュレーションメモリを使用している。
          ・64ビット整数型(D,UD,VD)は使用できない。(それに伴い、性能評価
            用システム参照機能(vxget_tim)にて使用しているSYSUTIM型はUW型
            である。)
　　　　　・割込み制御モードは、モード0には対応していない。
	　・日立製統合開発環境には対応していない。
　　　　　　（コンフィギュレータがコマンドライン専用のため。）
          ・コンフィギュレーションチェッカーは使用できない。
　　　　　　(gcc専用のため。)
	　・make dependは使用できない。(gcc専用のため。）



6　その他

      ・文字コード
	　　ソースコードの文字コードはEUCである。（SJISではない。）



7　　ディレクトリ･ファイル構成

　　　　H8Sターゲット依存部のファイルの概要は以下の通り

     config/h8s/
	Makefile.config		MakefileのH8S依存定義
	cpu_defs.h		プロセッサ依存部のアプリケーション用定義
	cpu_config.h		プロセッサ依存部の構成定義(C言語用)
	cpu_config_asm.h	プロセッサ依存部の構成定義(アセンブラ言語用)
	cpu_config.c		プロセッサ依存部の関数
	cpu_support.src		プロセッサ依存部のサブルーチン
	cpu_context.h		コンテキスト操作
	makeoffset.c		offset.h 生成サポートプログラム
	cpu_insn.h		低レベルのプロセッサ操作ルーチン
	start.src		スタートアップモジュール
	hw_timer.h      	タイマ操作ルーチン
	hw_serial.h        	シリアルポート操作ルーチン
	gen_int.pl	  	割込みの出入り口処理の生成
	make_asm_path.pl	アセンブラのパス作成
	make_sub.pl		サブコマンドファイルの作成
	offset_of.pl		offset.hの作成
	bit_of.pl		offset.hの作成
	int_header.txt		割込みの出入り口処理
	                        (perlスクリプト(utilsフォルダ内のgen_int.pl）に
	                        よって割込みの出入り口処理を生成する際に使用して
	                        いる)
	                        
    config/h8s/mispo_h8s/
	Makefile.config		MakefileのH8S/2350EVAボード依存定義
	h8s_2350.h   		H8S/2350EVAハードウェア定義(C言語用)
	h8s_2350_asm.h   	H8S/2350EVAハードウェア定義(アセンブラ言語用)
	sys_config.c 		システム依存部の関数
	sys_config.h		システム依存部の構成定義(C言語用)
	sys_config_asm.h	システム依存部の構成定義(アセンブラ言語用)
	sys_defs.h  	 	システム依存部のアプリケーション用定義
	sys_support.src	 	システム依存部のサブルーチン
	link.sub	  	リンカスクリプト
