
	    ＝ TOPPERS/JSPカーネル ユーザズマニュアル ＝
                （ARM7TDMI ターゲット依存部）

            （Release 1.3対応，最終更新: 11-Apr-2002）

------------------------------------------------------------------------ 
 TOPPERS/JSP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     Just Standard Profile Kernel

 Copyright (C) 2000,2001 by Embedded and Real-Time Systems Laboratory
                             Toyohashi Univ. of Technology, JAPAN

 上記著作権者は，Free Software Foundation によって公表されている 
 GNU General Public License の Version 2 に記述されている条件か，以
 下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェア（本ソフトウェ
 アを改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
 利用と呼ぶ）することを無償で許諾する．
 (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
     権表示，この利用条件および下記の無保証規定が，そのままの形でソー
     スコード中に含まれていること．
 (2) 本ソフトウェアを再利用可能なバイナリコード（リロケータブルオブ
     ジェクトファイルやライブラリなど）の形で利用する場合には，利用
     に伴うドキュメント（利用者マニュアルなど）に，上記の著作権表示，
     この利用条件および下記の無保証規定を掲載すること．
 (3) 本ソフトウェアを再利用不可能なバイナリコードの形または機器に組
     み込んだ形で利用する場合には，次のいずれかの条件を満たすこと．
   (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
       権表示，この利用条件および下記の無保証規定を掲載すること．
   (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
       こと．
 (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
     害からも，上記著作権者を免責すること．

 本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
 本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
 ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
 かなる損害に関しても，その責任を負わない．

 @(#) $Id: arm7tdmi.txt,v 1.7 2002/04/11 04:18:21 honda Exp $
------------------------------------------------------------------------


１．ARM7TDMI ターゲット依存部の概要

1.1 ターゲットシステムと開発環境

ARM7TDMIプロセッサのターゲットシステムとしては、CPUコアにARM7TDMIを用いてい
るKS32C50100を搭載したARM社のEvaluator-7Tをサポートしている。
開発環境には、GCC などの GNU開発環境を用い、オブジェクトファイルフォー
マットは ELF を標準とする。

1.2 サポートする機能の概要

ARM7TDMI 依存の機能として、性能評価用システム時刻参照機能(vxget_tim)を
サポートしている。割込みの禁止と許可(dis_int、ena_int)はサポートしてい
ない。


1.3 他のターゲットへのポーティング

現バージョンでは、KS32C50100に依存した設計となっている．そのため，他の
ARM7TDMIを利用したCPUに移植する場合，cpu_support.cのディスパッチャ関連，
CPUの状態管理関係のソースを変更する必要がある．なお，割込み関連の機能
は，システム依存部に記述している．


1.4 GDB スタブ

TOPPERS/JSP カーネルは GDB スタブと共に使用することを前提にしている。
そのため、sys_putc はスタブ呼び出しで実現し、割り込みハンドラはスタブ
経由で呼ばれる。


1.5 シリアルポート

スタブによる GDB との通信と、カーネルのログ出力用に2つのシリアルポート
使用する。GDB用の通信ポートとカーネルのログ出力用ポートの設定は次の用
になっている．なお、全てのポートにおいて データ:
8bit,Parity:none,Stop:1bitである。

                  GDB 通信用          カーネルログ用
・Evaluator-7T   COM1:57600bps         COM2:19200bps     


1.6 Thumbコードについて

Thumbコードの利用については，現在はサポートしてない．



２．ARM7TDMI プロセッサ依存部の機能

この節では、カーネルおよびシステムサービスの機能の中で、ARM7TDMI依存の部分
について解説する。


2.1 データ型

int型および unsigned int型のサイズは 32ビットである。

2.2 割込み管理機能と割込みハンドラ

カーネル管理外の割込みとしては FIQがある。よって、CPUロック状態や初
期化ルーチン内では、FIQ 以外の割込みはすべて禁止されている。具体的には、
CPSR(カレントプログラム状態レジスタ)のIRQ禁止ビット(ビット7)が 1 に設
定される。


DEF_INH で指定する割込みハンドラ番号(inhno)は、KS32C50100 で周辺モジュー
ル毎に定義されている割り込み番号である．データ型(INHNO)は 
unsigned int型に定義されている。


2.3 CPU例外管理機能とCPU例外ハンドラ

DEF_EXC で指定する割込みハンドラ番号(excno)は、ARM7TDMIで定義されてい
る，例外要因である．そのデータ型(EXCNO)は unsigned int 型に定義されて
いる。DEF_EXC で、例外コード番号として有効でない値や、CPU例外に対応し
ない番号を指定した場合の動作は保証されない。

CPU例外ハンドラに渡されるp_excinfは，CPU例外発生時のコンテキストを保存
したスタックへのポインタが渡される．スタックの構造を以下に示す．


      ----------------------
     |         R0           |  <-- p_excinf
      ----------------------
     |         R0           |
      ----------------------
     |         R1           |
      ----------------------
     |         R2           |
      ----------------------
     |         R3           |
      ----------------------
     |         ip           |
      ----------------------
     |         lr           |
      ----------------------
     |         PC           |
      ----------------------


2.4 スタートアップモジュール

ARM7TDMI依存のスタートアップモジュール(start.S)では、次の初期化処理を行う。

(A) プロセッサモードの初期化とスタックポインタの初期化

最初に、プロセッサモードを特権モード、IRQ,FIQ割込みを禁止にする．

次に、スタックポインタ(sp)を STACKTOP に設定する。ここで割込みスタッ
クポインタに設定されたスタック領域は、カーネル起動後は非タスクコンテキ
スト用のスタック領域として使われる。STACKTOP は、sys_config.h 部で定義
することを想定している。

(B) hardware_init_hook の呼出し

hardware_init_hook が 0 でない場合には、hardware_init_hook を呼び出す。
hardware_init_hook は、カーネルが起動される前に行う必要があるターゲッ
ト依存の初期化を行うために用意している。hardware_init_hook がどこでも
定義されていない場合、リンカでこのシンボルを 0 に定義する(リンカスク
リプト内に記述あり)。

(C) bssセクションと dataセクションの初期化

bssセクションをゼロクリアする。また、dataセクションを初期化する。

(D) software_init_hook の呼出し

software_init_hook が 0 でない場合には、software_init_hook を呼び出す。
software_init_hook は、カーネルが起動される前に行う必要があるソフトウェ
ア環境(具体的には、ライブラリ)依存の初期化を行うために用意している。
software_init_hook がどこでも定義されていない場合、リンカでこのシンボ
ルを 0 に定義する(リンカスクリプト内に記述あり)。

(E) カーネルの起動

kernel_start へ分岐し、カーネルを起動する。kernel_start からリターンし
てくることは想定していない。




３．システム依存部の機能


3.1 システムクロックドライ

システムクロックドライバが isig_tim を呼び出す周期は、sys_defs.h 中の 
TIC_NUME と TIC_DENO で定義されている(標準は 1ミリ秒周期)。この定義
を変更することで、isig_tim を呼び出す周期を変更することができる。ただ
し、タイマの精度が 1μ秒であるため、1μ秒単位で端数になる値を設定した
場合には、isig_tim の呼出し周期に誤差が生じることになる。


3.2 性能評価用システム時刻参照機能

ARM7TDMI 依存部では、性能評価用システム時刻参照機能(vxget_tim)をサポー
トしている。性能評価用システム時刻の精度は 1μ秒単位であるが、タイマの
現在値を読み出すために一時的にタイマを停止させる必要があるため、
vxget_tim を呼ぶ度にシステムクロックが少しづつ遅れることになる。なお、
SYSUTIM型は UD型(64ビットの符号無し整数型)に定義している。


3.3 シリアルインタフェースドライバ

シリアルインタフェースドライバは、KS32C50100のUART0をサポートしてる。


3.4 メモリマップ

・CARD-E09A
依存部では、コード領域を 0x00008000 〜 0x00039fff 約200KB、データ領域を 
0x0003A000 〜 の約200KB，非タスクコンテキスト用のスタック領域を 〜
0x00073fff に確保している。0x0c074000以下は、スタブのワークエリアとなっ
ており、使用することができない。



４．開発環境の構築

開発環境の構築方法については，GNU開発環境構築マニュアルを参照のこと．


4.1 開発環境のバージョン
動作確認したツールのバージョンは以下の通りである．

    BINUTILS : 2.11.2
    GCC-CORE : 3.0.2
    GDB      : 5.0
    NEWLIB   : 1.9.0

4.2 ツールソースの修正
上記のバージョンのツールを構築するさい以下の修正が必要となる．

4.2.1 GCC-CORE
  そのままコンパイルすると，libgcc,libcがinterwork対応にならないため，
    ./gcc/config/arm/t-arm-elfの
           MULTILIB_OPTIONS += mno-thumb-interwork/mthumb-interwork 
           MULTILIB_DIRNAMES += normal interwork 
           MULTILIB_EXCEPTIONS += *mapcs-26/*mthumb-interwork* 
   の前についている"#"を外して有効にする．   

4.2.2 GDB
   ./gdb/rdi-share/devsw.c
     39行目，69行目 のstruct tm lmの宣言している行をコメントアウトする．
   

4.3 プログラムのダウンロード
     ホストPCとボードをシリアルケーブルで繋ぎ，gdbにダウンロードしたい
     プログラムを指定する．
     次に以下のコマンドを実行する．ttySXXのXXはシリアルを接続してい
     るポート番号である．

           set remotebaud 57600 
           set endian little 
           set rdi /dev/ttySXX 
      後は，loadでプログラムをダウンロードして，continueで実行する．
      また，Ctrl-Cで動作中のプログラムを停止できる．



５．その他

5.1 ディレクトリ・ファイル構成

ARM7TDMI ターゲット依存部の各ファイルの概要は次の通り．

    config/arm7tdmi/
	Makefile.config	MakefileのARM7TDMI依存定義
    arm7tdmi.h      ARM7TDMIの定義
	armelf.ld	    ビッグエンディアン用リンカスクリプト
	cpu_defs.h	    プロセッサ依存部のアプリケーション用定義
	cpu_config.h	プロセッサ依存部の構成定義
	cpu_config.c	プロセッサ依存部の関数
	cpu_support.S	プロセッサ依存部のサブルーチン
	cpu_context.h	コンテキスト操作
	makeoffset.c	offset.h 生成サポートプログラム
	cpu_insn.h	    低レベルのプロセッサ操作ルーチン
    start.S         スタートアップモジュール



    config/arm7tdmi/evaluator_7t
	Makefile.config	MakefileのEvaluator-7T依存定義
	evaluator7t.h   Evaluator-7Tハードウェア定義
	hw_serial.h	    シリアルインタフェースデバイス操作ルーチン
	hw_timer.h      タイマ操作ルーチン
	sys_config.c	システム依存部の関数
	sys_config.h	システム依存部の構成定義
	sys_defs.h      システム依存部のアプリケーション用定義
	sys_support.S	システム依存部のサブルーチン
