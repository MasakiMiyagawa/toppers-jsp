
	    ＝ TOPPERS/JSPカーネル ユーザズマニュアル ＝
    （Windows シミュレーション環境，タスク−スレッド対応モデル）

	    （Release 1.0β対応，最終更新: 14-Nov-2000）

------------------------------------------------------------------------ 
 TOPPERS/JSP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     Just Standard Profile Kernel

 Copyright (C) 2000 by Embedded and Real-Time Systems Laboratory
                             Toyohashi Univ. of Technology, JAPAN

 上記著作権者は，以下の条件を満たす場合に限り，本ソフトウェア（本ソ
 フトウェアを改変したものを含む．以下同じ）を使用・複製・改変・再配
 布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
     権表示，この利用条件および下記の無保証規定が，そのままの形でソー
     スコード中に含まれていること．
 (2) 本ソフトウェアをバイナリコードの形または機器に組み込んだ形で利
     用する場合には，次のいずれかの条件を満たすこと．
   (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
       権表示，この利用条件および下記の無保証規定を掲載すること．
   (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
       こと．
 (3) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
     害からも，上記著作権者を免責すること．

 本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
 本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
 ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
 かなる損害に関しても，その責任を負わない．

 @(#) $Id: windows.txt,v 1.1 2000/11/14 16:29:39 takayuki Exp $
------------------------------------------------------------------------


このドキュメントでは，TOPPERS/JSP Windowsシミュレーション環境部分につ
いて解説します．

１． Windowsシミュレーション環境 ターゲット依存部の概要

1.1 ターゲットシステムと開発環境

Windowsシミュレーション環境の実行環境としては，次のものを想定している．

    ・Microsoft Windows 95/98/NT4/2000
        #一部の機能はMicrosoft Windows NT4/2000のみに対応

また開発環境として次のものを想定している．
	・Microsoft Visual C++ 6.0
	・cygwin 1.1.0 + gcc 2.95.2 (詳しい説明は割愛)

補足

TOPPERS/JSP Windowsシミュレーション環境の開発は次の環境で行われている．

    ・Microsoft Windows 2000 Professional
        + Microsoft Windows 2000 ServicePack1
    ・Microsoft Visual Studio 6.0 Enterprise
        + Microsoft Visual Studio 6.0 ServicePack4
        + Microsoft Visual C++ Processor Pack


1.2 サポートする機能の概要
Windowsシミュレーション環境に依存した機能として，割込みマスクの変更・参照(ch
g_ixx, get_ixx)と割り込みの禁止・許可(dis_int, ena_int)をサポートしている．
また性能評価用システム時刻参照機能(vxget_tim)をサポートしている．


1.3 TOPPERS/JSP Windowsシミュレーション環境の制限事項

    ・タイマ分解能は100ms
        Windowsシミュレーション環境ではタイマティックは100msとなっている．
        ただし単位はmsのままであり，50msのdly_tskを発行した場合 100ms秒後に
        処理が行われれることになる．

    ・タスクスタック，非タスクコンテキスト用スタックは自動生成
        各コンテキストで必要なスタックはWindowsが生成するため，コンフィギュ
        レータが標準で生成するスタックは利用されない．またスタック領域が不
        足した場合，Windowsが自動的に領域を再割り当てする．


２．Windowsシミュレーション環境に依存した機能

この節では，カーネルおよびシステムサービスの機能の中で，Windowsシミュレーション環境依存の部分について解説する．

2.1 データ型
int型 および unsigned int型のサイズは32ビットである．

2.2 割込み管理機能と割込みハンドラ

Windowsシミュレーション環境ではm68k方式の割込みをエミュレーションしている．
ただしNMIをサポートしないため，全ての割り込みはカーネルの管理内で発生する．
CPUロック状態や初期化ルーチン内では割込みマスクに7が設定され，全ての割り込み
が禁止される．

デフォルトの割込み要因数は7つであり，7を最大優先度とする．割り込み要因の数は
cpu_defs.h:15のINT_NUMINTERRUPTSを修正することで任意に増やすことが可能である
 (ただし最低割込み要因番号は1に固定されている)．通常タイマ割込みが要因番号4
 を利用する．これ以外の割込みはユーザが次の関数を利用して任意に発生させるこ
 とができる．

	割り込み要求の発生
		void HALInterruptRequest(unsigned int intno)
		割り込み要因番号intnoに割り込み要求を発生させる

DEF_INHで指定する割込みハンドラ番号(inhno)は，68000での例外ベクタ番号を表し，そのデータ型(INHNO)はunsigned int型に定義されている．
DEF_INHで無効な例外ベクタ番号を指定した場合の動作は保証されない．

Windowsシミュレーション環境依存の機能として，割込みマスクの値を変更するためのサービスコール chg_imsと，参照するためのサービスコール get_ims をサポートしている．なお，割込みマスクの値を表すデータ型はunsigned intである．

TOPPERS/JSP Windowsではm68k方式の割込みをエミュレートしており，1から7までの7要因(7が最高)まで利用可能です．


TOPPERS/JSP Windowsでは次の関数をサポートしている．

BOOL def_int( unsigned int ims, void * rtn);    /* ハンドラ定義 */

ER  ena_int(unsigned int ims);          /* 許可 */
ER  dis_int(unsigned int ims);          /* 禁止 */
ER  chg_ims(unsigned int ims);          /* 割込みレベルの設定 */
ER  get_ims(unsigned int *p_ims);       /* 割込みレベルの取得 */

def_int : 割込みハンドラ定義
    割込みハンドラrtnを割込み要因番号imsに対応づける

ena_int : 割込み許可
    割込み要求を許可します．引数は無視され，全許可となる

dis_int : 割込み禁止
    割込み要求を禁止します．引数は無視され，全禁止となる

chg_ims : 割込みレベル設定
    割込み要求マスクレベルを引数で設定した値に設定
    以降マスクレベル以下の割込み要求は禁止となる

get_ims : 割込みレベルの取得
    割込み要求マスクレベルを取得し，引数で示された場所に格納する


2.3 CPU例外管理機能とCPU例外ハンドラ

Windowsシミュレーション環境では実装はされているが，CPU例外管理機構をサポート
しない．

DEF_EXCで指定する割込みハンドラ番号(excno)はWindowsの例外要因番号を表し，そ
のデータ型(EXCNO)はunsigned int型に定義されている．DEF_EXC で，例外ベクタ番
号として有効でない値や，CPU例外に対応しない番号を指定した場合の動作は保証さ
れない．

Windows上で例外が発生した場合，対応付けられたCPU例外ハンドラを起動した後，他
のWindows例外ハンドラへ処理を渡す．デバッガなどが起動している場合はデバッガ
によってハンドリングされるため，たいていの場合はエラーとなってその場で停止す
る．


３．Windowsシミュレーション環境に固有な機能

3.1 シリアルエミュレーション

TOPPERS/JSP Windowsでは，「コンソール」「メールボックス」「パイプ」の3種類か
ら選択して利用することができる．「コンソール」ではキーボードから入力し，専用
のウィンドウに出力することができる．「メールボックス」ではWindowsのメールボ
ックス機能を利用したシリアルエミュレーションが行える．「パイプ」ではWindowsN
Tの名前つき双方向パイプを利用したしリアルエミュレーションが行える．デバッグ
の状況に応じて，これら3種類のシリアルエミュレータから最適なものを選択可能で
ある．

        メールボックス
            入力 : \\.\mailslot\toppers\serial_in
            出力 : \\.\mailslot\toppers\serial_out
        
        名前付き双方向パイプ
            \\.\pipe\toppersserial

3.2 デバッグコンソール

TOPPERS/JSP Windowsシミュレーション環境では，デバッグ文字列を出力するための
専用コンソールを提供している．デバッグコンソールでは簡単な記述でデバッグ文字
列を出力することができ，通常のシリアルを利用しなくとも画面だけでフローのデバ
ッグなどが行える．
 #ItIs/Winに搭載されていたカーネル内部情報表示は別ユニットとなった

デバッグコンソールを有効にするにはDebug.h:6の
 //#define DEBUG_ENABLE
のコメントをはずし，宣言を有効にすることで利用可能となる．

TOPPERS/JSP Windowsシミュレーション環境では，次のデバッグ用機能を提供してい
る．

OnDebug : デバッグ時のみ有効となる行につける宣言
    行の頭にOnDebugをつけることで，DEBUG_ENABLE時にのみ有効となる行を簡単に
    作ることができる．
    
    DEBUG_ENABLE時   : #define OnDebug
    非DEBUG_ENABLE時 : #define OnDebug //

    例
        OnDebug wsprintf(buffer,"i = %d",i);

unsigned int DebugOut(LPCSTR text) : デバッグコンソールへの出力
    DebugOut関数はデバッグコンソールへ文字列を出力する．
    
    非DEBUG_ENABLE時にはコメント行になる．


3.3 タスクトレイ (Notify Icon)

TOPPERS/JSP Windowsシミュレーション環境では，通常プログラムは見えない存在と
して動作する．しかしそれではプログラムの終了を確認する手段がなくなってしまう
危険性を伴う．そのためWindowsシミュレーション環境では画面右下のタスクトレイ
上にアイコンが表示され，プログラムが現在実行中であるかどうかが確認できるよう
になっている．

またこのトレイ上のアイコンを右クリックすることで，プログラムを強制終了させる
ことが可能である．

DEBUG_ENABLE時にはTOPPERS/JSP Windowsシミュレータの本体となるウィンドウを強
制的に表示させるようになっている．この場合は本体となるウィンドウを終了させる
ことでプログラムを強制終了させることができる．

４．開発環境の構築

4.1 開発環境の概要

カーネルを実行するには，JSPカーネルの配布キットに含まれる以外に，以下のツールおよびライブラリが必要である．

Microsoft Visual C ++ (6.0にて確認)
	単体にて動作可能

cygwin + gcc
	GNU Make (3.77にて確認)
	BINUTIL (諸ツール 2.10にて確認)
	GCC (Cコンパイラ 2.95.2にて確認)
	NEWLIB (標準Cライブラリ 1.8.1にて確認)
	#詳細は割愛

まずコンフィギュレータを生成する．
コンフィギュレータは/cfg/VC_Project/内にあるMicrosoft Visual C++プロジェクト
ファイルを開くことにより，諸設定をせずとも即ビルドが可能な状態になる．
ここでできたcfg.exeをパスがとおった場所 または コンフィギュレーションファイル
(サンプルの場合は/WINDOWS/)が置いてある場所へ移動する．

TOPPERS/JSP Windowsシミュレーション環境の構築はMicrosoft Visual C++のプロジ
ェクト ワークスペースを利用する．/config/WINDOWS/VC_Project内にあるプロジェ
クトファイルおよびワークスペースを開くことで，構築に必要な設定を全て終えた状
態で起動する．

 #このプロジェクトではサンプルプログラムが生成されるようになっている

付属のサンプルプログラムではすでに設定がされているが，サンプル以外のコンフ
ィギュレーションファイルを利用する場合，コンフィギュレータにkernel_id.hとker
nel_cfg.cを作成させる必要がある．

  (a) Visual C++ に行わせる場合
      1.  対象となるcfgファイルを選択し，コンテキストメニュー(右クリック)から
          設定を選択する．
      2.  一般から「常にカスタムビルドステップを使用」を有効にする
      3.  カスタムビルドタブを選択肢，コマンド部に次のコマンドを打つ
            cd $(InputDir)
            cl /P /EP $(InputName).cfg
            cfg.exe < $(InputName).i
      4.  出力部に次のファイルを打つ
            kernel_cfg.c
            kernel_id.h
  
  (b) コマンドラインから直接打つ場合
      1. コンフィギュレーションファイルのあるディレクトリで
         次のコマンドを入力する
           cl /E /EP <ファイル名> | cfg.exe

kernel_id.hとkernel_cfg.cが生成されたら，これらのファイルをプロジェクトに追
加し，Visual C++からビルドを行えばプログラムが生成される．

付属のプロジェクトファイルでは，それぞれ適切なフォルダにファイルが格納される
ようになってる．ユーザプログラムはSource FilesとHeader Filesに格納される．サ
ンプル以外のプログラムを利用される場合，この2つのフォルダに格納されているフ
ァイルをプロジェクトから削除してから，新しいプログラムを追加する必要がある．


５．その他

5.1 ディレクトリ・ファイル構成

1.4 TOPPERS/JSP Windows-HAL 構成ファイル

[jsp]
  +- [config]
  |   +- [WINDOWS]
  |       +- cpu_config.h : プロセッサ依存モジュール
  |       +- cpu_config.c : プロセッサ依存モジュール
  |       +- cpu_context.h : タスクコンテキスト操作ルーチン
  |       +- cpu_defs.h : m68kっぽい割込みエミュレータ
  |       +- cpu_defs.c : m68kっぽい割込みエミュレータ
  |       +- Debug.h : デバッグコンソール定義ファイル
  |       +- Debug.c : デバッグコンソールモジュール
  |       +- hal_msg.h : カーネルシミュレータ メッセージ定義ファイル
  |       +- hal_resource.rc : TOPPERS/JSP Windows リソースファイル
  |       +- hw_timer.h : タイマ操作
  |       +- serial_console.c : シリアル(コンソール)
  |       +- serial_mailbox.c : シリアル(メールボックス)
  |       +- serial_pipe.c : シリアル(名前付パイプ)
  |       +- start.c : スタートアップ
  |       +- sys_config.h : システム依存モジュール
  |       +- sys_config.c : システム依存モジュール
  |       +- sys_defs.h : システム依存定義ファイル
  |       +- vwindows.h : windows.h衝突回避用ヘッダファイル
  |       +- icon1.ico : アイコンファイル
  |       +- [VC_Project]
  |           +- Toppers.dsp : Visual C++ プロジェクトファイル
  |           +- Toppers.dsw : Visual C++ ワークスペース
  +- [WINDOWS]
      +- kernel_id.h : 自動割当ID定義ファイル
      +- kernel_cfg.c : コンフィギュレータ生成ファイル
      +- sample1.h : サンプルプログラム ヘッダー
      +- sample1.c : サンプルプログラム


６．バージョン履歴

    2000年11月15日	Release 1.0	最初のリリース

以上
