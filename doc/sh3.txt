
	    ＝ TOPPERS/JSPカーネル ユーザズマニュアル ＝
    		    （SH3 ターゲット依存部）

	    （Release 1.1β対応，最終更新: 24-Feb-2001）

------------------------------------------------------------------------ 
 TOPPERS/JSP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     Just Standard Profile Kernel

 Copyright (C) 2000,2001 by Embedded and Real-Time Systems Laboratory
                             Toyohashi Univ. of Technology, JAPAN

 上記著作権者は，以下の条件を満たす場合に限り，本ソフトウェア（本ソ
 フトウェアを改変したものを含む．以下同じ）を使用・複製・改変・再配
 布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
     権表示，この利用条件および下記の無保証規定が，そのままの形でソー
     スコード中に含まれていること．
 (2) 本ソフトウェアをバイナリコードの形または機器に組み込んだ形で利
     用する場合には，次のいずれかの条件を満たすこと．
   (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
       権表示，この利用条件および下記の無保証規定を掲載すること．
   (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
       こと．
 (3) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
     害からも，上記著作権者を免責すること．

 本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
 本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
 ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
 かなる損害に関しても，その責任を負わない．

 @(#) $Id: sh3.txt,v 1.8 2001/02/23 20:36:19 honda Exp $
------------------------------------------------------------------------


１．SH3 ターゲット依存部の概要

1.3 ターゲットシステムと開発環境

SH3ロセッサのターゲットシステムとしては、それぞれSH7708, SH7709,
SH7709Aを搭載した以下のボードをサポートしている。

・(株)EPSON製の CARD-E09A ボード(CPU: SH7709A)
・三菱電機マイコン機器ソフトウエア(株)製の MU200-RSH3 ボード(CPU: SH7709)
・(株)電産製の DVE-SH7700 ボード (CPU: SH7708)

開発環境には、GCC などの GNU開発環境を用い、オブジェクトファイルフォー
マットは ELF を標準とする。

1.2 サポートする機能の概要

SH3依存の機能として、割込みマスクの変更・参照(chg_ixx、get_ixx)と、
性能評価用システム時刻参照機能(vxget_tim)をサポートしている。割込み
の禁止と許可(dis_int、ena_int)はサポートしていない。

1.3 他のターゲットへのポーティング

現バージョンでは、SH7708 とその拡張版の SH7709,SH7709A をサポートして
いる。割り込み時に割り込み要因がセットされるレジスタは、SH7708 では 
INVET だが、SH7709/A では追加された内蔵モジュールの割り込み要因は 
INVET2 に設定される。そのため、この部分をコンパイルプラグにより切り替
えている。

他の SH 系列のプロセッサへのポーティングについては、SH3 と機構が似た
SH4については比較的容易にポーティング可能と思われるが、ベクタ形式の例
外機能を持つ SH1,SH2 については面倒であると予想される。他のターゲット
については、SH3が多くの内蔵モジュール持っていることもあり、内蔵モジュー
ルを使うならば、容易に行えると思われる。


1.4 GDB スタブ

TOPPERS/JSP カーネルは GDB スタブと共に使用することを前提にしている。
そのため、sys_putc はスタブ呼び出しで実現し、割り込みハンドラはスタブ
経由で呼ばれる。スタブを使用せずROMやCFにカーネルを置き実行するために
は、直接シリアルポートへの出力や、VBRの設定が必要になる。そこで、
WITH_STUB というコンパイルフラグによりこれらの機能を切り替える。だたし、
ROM化の際に必要なバスコントローラの設定は記述していないため、初期化ルー
チンに記述する必要がある。それぞれのターゲットで WITH_STUB のコンパイ
ルフラグをとった場合必要な作業を下に示す。初期化ルーチンはスタブでの記
述が参考になると思われる。

・CARD-E09A
	./config/sh3/card_e09a/Makefile.config 中のTEXT_START_ADDRESS、
	#DATA_START_ADDRESS をスタブ用に変更(コメントアウトしてある)。
・MU200-RSH3
	hardware_init_hook にバスステートコントローラ等の初期化を追加。
	sys_initialize に SCIF の初期化を追加。
・DVE-SH7700
	hardware_init_hook にバスステートコントローラ等の初期化を追加。
	初期化ルーチンはスタブでの記述が参考になる。



1.5 シリアルポート

CARD-E09AとMU200-RSH3は、スタブによる GDB との通信と、カーネルのログ出
力用に2つのシリアルポート使用する。DVE-SH7700 は、シリアルポートが1ポー
トしか持たないため、 カーネルのログはスタブ経由で GDB に出力する。その
ため、コンソールからの入力が行えない。そのため、WITH_STUB オプションを
オフにしてコンパイルして、ダウンロードのみをスタブにより行い後は単体で
実行することにより、コンソール入力を可能にする方法がある。必要なファイ
ルと、具体的な方法は DVESH7700 以下のXXX.without_stubに置いてある。


それぞれ使用するポートとそのボーレートを下に示す。MU200-RSH3はオシレー
タを変更できるが、40,16MHz をサポートしており、DVE-SH7700 では、CPU内
部クロックを60MHzか30MHzに選択が可能である。これらは、システム依存の 
Makefile.config で選択できる。他のクロックを使用する場合は、スタブも含
めてタイマ、シリアルポートの設定値を変更する必要がある。なお、全てのポー
トにおいて データ: 8bit,Parity:none,Stop:1bitである。


                  GDB 通信用                カーネルログ用
・CARD-E09A      SCIF:115200bps         Companion Chip内シリアル3:19200bps     
・MU200-RSH3     SCIF:57600bps          SCI1(IrDA):57600bps
・DVE-SH7700     SCI:115200bps



２．SH3 プロセッサ依存部の機能

この節では、カーネルおよびシステムサービスの機能の中で、SH3依存の部分
について解説する。

2.1 データ型

int型および unsigned int型のサイズは 32ビットである。

2.2 割込み管理機能と割込みハンドラ

カーネル管理外の割込みとしては、 NMI がある。よって、CPUロック状態や初
期化ルーチン内では、NMI 以外の割込みはすべて禁止されている。具体的には、
IPM(Interrupt Priority Mask)が 16 に設定される。しかしながら、ボード上
に NMI 入力を持たないターゲットのため、GDB のスタブがホストのマシンと
通信するためのシリアルポートの優先度を 16 で登録し、GDB で Ctrl-C を押
すと 割り込みが入りスタブに制御が移るようにしてある。この機能を使用す
るためにはCPUロック状態では、優先度が 15 になるようにしなければならな
い。そのため、CPUロックで設定される優先度をマクロで MAX_IPM で指定して
いる。MAX_IPM はcpu_config.h の中で #define されている。スタブを使う場
合は 15 にスタブを使わない場合は 16 に設定している。


DEF_INH で指定する割込みハンドラ番号(inhno)は、SH7708 では、割り込み事
象レジスタ(INTEVT)に設定されるコードであり、SH7709/A では、割り込み事
象レジスタ2(INTEVT2)に設定されるコードである。データ型(INHNO)は 
unsigned int型に定義されている。DEF_INH で、INTEVT,INTEVT2コードとして
有効でない値や、外部割込みに対応しない番号を指定した場合の動作は保証さ
れない。

SH3依存の機能として、SR(Status Register)中の 割り込みマスクビット(I3〜
I0)の値を変更するためのサービスコール chg_ipm と、参照するためのサービ
スコール get_ipm をサポートしている。なお、割り込みマスクビットの値を
表すデータ型 IPM は、unsigned int型に定義されている。

これらのサービスコールは、タスクコンテキストで CPUロック解除状態の場合
にのみ呼び出すことができる。chg_ipm により IPM を 0 以外(すなわち、何
らかの割込みが禁止されている状態)にした場合でも、ディスパッチは禁止さ
れず、chg_ipm により変更した IPM の値は、ディスパッチ後のタスクに引き
継がれる。例えば、あるタスクで IPM を 1 に変更した後、何らかの割込みに
より別のタスクに切り替わると、切り替わった後のタスクでも IPM は 1 にな
る。

chg_ipm をサポートするために、割込みハンドラの出入口処理などにオーバヘッ
ドを生じている。そこで、SUPPORT_CHG_IPM というマクロにより、これらのサー
ビスコールをサポートするかどうかを切り替えられるようにしている。
SUPPORT_CHG_IPM は、cpu_config.h の中で #define されている。

SH3依存の割込みマスクの変更・参照のためのサービスコールの仕様は次の
通り。

(1) chg_ipm			割込みマスクの変更

【C言語API】
	ER ercd = chg_ipm(IPM ipm);

【パラメータ】
	IPM	ipm		設定すべき IPM の値

【リターンパラメータ】
	ER	ercd		エラーコード

【エラーコード】
	E_CTX		コンテキストエラー
	E_PAR		パラメータエラー(ipm が不正)

【機能】

IPM(Interrupt Priority Mask)を ipm で指定された値に設定する。指定した
値が 0〜15ないし16以外の場合、E_PARエラーとなる。IPM を 1〜MAX_IPM -1 
に設定した場合でも、ディスパッチは禁止されない。また、設定した IPM の
値は、ディスパッチ禁止後も引き継がれる。

なお、このサービスコールを用いて、IPM を MAX_IPM (すべての割込みを禁止)
に設定することはできない。IPM を MAX_IPM にしたい場合には、loc_cpu を
使うべきである。

このサービスコールは、タスクコンテキストで CPUロック状態解除の時のみ呼
び出すことができる。非タスクコンテキストや CPUロック状態で呼び出した場
合には、E_CTXエラーとなる。

(2) get_ipm			割込みマスクの参照

【C言語API】
	ER ercd = get_ipm(IPM *p_ipm);

【パラメータ】
	なし

【リターンパラメータ】
	ER	ercd		エラーコード
	IPM	ipm		現在の IPM の値

【エラーコード】
	E_CTX		コンテキストエラー

【機能】

現在の IPM(Interrupt Priority Mask)の値を読み出し、ipm に返す。

このサービスコールは、タスクコンテキストで CPUロック状態解除の時のみ呼
び出すことができる。非タスクコンテキストや CPUロック状態で呼び出した場
合には、E_CTXエラーとなる。


2.3 CPU例外管理機能とCPU例外ハンドラ

DEF_EXC で指定する割込みハンドラ番号(excno)は、SH3 での 例外事象レジス
タに設定される例外コード番号を表し、そのデータ型(EXCNO)は unsigned int
型に定義されている。DEF_EXC で、例外コード番号として有効でない値や、
CPU例外に対応しない番号を指定した場合の動作は保証されない。

CPU例外ハンドラに渡されるp_excinfは，CPU例外発生じのコンテキストを保存
したスタックへのポインタが渡される．スタックの構造を以下に示す．


      ----------------------
     |         R7           |  <-- p_excinf
      ----------------------
     |         R6           |
      ----------------------
     |         R5           |
      ----------------------
     |         R4           |
      ----------------------
     |         R3           |
      ----------------------
     |         R2           |
      ----------------------
     |         R1           |
      ----------------------
     |         R0           |
      ----------------------
     |         SR           |
      ----------------------
     |         PR           |
      ----------------------
     |         PC           |
      ----------------------

また，CPU例外発生時のPCの値はインクリメントされる．そのため，CPU例外ハ
ンドラから復帰を行うと，CPU例外発生した命令の次の命令から実行を再開す
る．



2.4 スタートアップモジュール

SH3依存のスタートアップモジュール(start.S)では、次の初期化処理を行う。

(A) プロセッサモードの初期化とスタックポインタの初期化

最初に、すべてのキャッシュを無効化した後、キャッシュをライトスルーモー
ドに設定し、有効にする。また、プロセッサのモードを、特権モード、レジス
タバンク1に設定し、割り込みマスクを MAX_IPM に設定する。


次に、スタックポインタ(r15)を STACKTOP に設定する。ここで割込みスタッ
クポインタに設定されたスタック領域は、カーネル起動後は非タスクコンテキ
スト用のスタック領域として使われる。STACKTOP は、sys_config.h 部で定義
することを想定している。

(B) hardware_init_hook の呼出し

hardware_init_hook が 0 でない場合には、hardware_init_hook を呼び出す。
hardware_init_hook は、カーネルが起動される前に行う必要があるターゲッ
ト依存の初期化を行うために用意している。hardware_init_hook がどこでも
定義されていない場合、リンカでこのシンボルを 0 に定義する(リンカスク
リプト内に記述あり)。

(C) bssセクションと dataセクションの初期化

bssセクションをゼロクリアする。また、dataセクションを初期化する。

(D) software_init_hook の呼出し

software_init_hook が 0 でない場合には、software_init_hook を呼び出す。
software_init_hook は、カーネルが起動される前に行う必要があるソフトウェ
ア環境(具体的には、ライブラリ)依存の初期化を行うために用意している。
software_init_hook がどこでも定義されていない場合、リンカでこのシンボ
ルを 0 に定義する(リンカスクリプト内に記述あり)。

(E) カーネルの起動

kernel_start へ分岐し、カーネルを起動する。kernel_start からリターンし
てくることは想定していない。


2.4 レジスタバンク

例外ハンドラの入口を除き基本的にレジスタバンク1を使用している。レジス
タバンク1は r7 のみ例外/割り込みのネスト回数のカウント用に使用している。
非タスクコンテキストとタスクコンテキストの判別はこのレジスタにより行っ
ている。なお、スタブはレジスタバンク0のr0を使用するため、このレジスタ
に書き込んだデータは書き変る恐れがある。


2.5 MACHとMACL

MACHとMACLについては，gccに-mhitachiオプションをつけると，関数でMACHと
MACLを使用する場合，スタックに保存してから使用し，関数を抜けると元に戻
すため，割込みでは保存していない．また，自らディスパッチャを呼び出し，
ディスパッチする場合は，関数呼び出しになるため，この呼び出しにまたがっ
て，これらのレジスタを使うことはないため保存していない．そのためアセン
ブラのコードを使用する場合もこのルールに従う必要がある．


2.6 GBR

gccはGBRを使用しないため，割込みハンドラの入口では保存していない．割込
みハンドラ内でGBRを使う場合はアプリケーション側でGBRの待避/保存を行う
必要がある．また，上記のMACHとMACLと同じ理由により，自らディスパッチャ
を呼び出す場合にも保存していない．なお，割込みからのディスパッチ(受動
的ディスパッチ)では保存している．



３．システム依存部の機能

3.1 システムクロックドライバ(CARD-E09A,MU200-RSH3,DVE-SH7700)

システムクロックドライバが isig_tim を呼び出す周期は、sys_defs.h 中の 
TIC_NUME と TIC_DENO で定義されている(標準は 1ミリ秒周期)。この定義
を変更することで、isig_tim を呼び出す周期を変更することができる。ただ
し、タイマの精度が 1μ秒であるため、1μ秒単位で端数になる値を設定した
場合には、isig_tim の呼出し周期に誤差が生じることになる。

3.2 性能評価用システム時刻参照機能(CARD-E09A,MU200-RSH3,DVE-SH7700)

SH3依存部では、性能評価用システム時刻参照機能(vxget_tim)をサポートして
いる。性能評価用システム時刻の精度は 1μ秒単位であるが、タイマの現在値
を読み出すために一時的にタイマを停止させる必要があるため、vxget_tim を
呼ぶ度にシステムクロックが少しづつ遅れることになる。なお、SYSUTIM型は 
UD型(64ビットの符号無し整数型)に定義している。

3.3 シリアルインタフェースドライバ

CARD-E09A シリアルインタフェースドライバは、CARD-E09A 上の Companion
Chip に内蔵されている16550互換のシリアルをサポートしてる。MU200-RSH3 
のシリアルインターフェースドライバはSCI1(IrDA)をサポートしている。スタ
ブを使わない場合に使用する、DVE-SH7700 のシリアルドライバはSCIをサポー
トしている。同じチップで上記と異なるポートを使用したい場合は、それぞれ
のhw_serial.h をコピーすればよい。

3.4 メモリマップ

・CARD-E09A
依存部では、コード領域を 0x0c033000 〜 0x0c122fff 約1MB、データ領域を 
0x0c123000 〜 の約3MB，非タスクコンテキスト用のスタック領域を 〜
0x0c422fff に確保している。0x0c000000 〜 0x0c02ffff は、ROMモニタまた
はスタブのワークエリアとなっており、使用することができない。

・MU200-RSH3
依存部では、コード領域を 0x0c001000 〜 0x0c0fffff 約1MB、データ領域を 
0x0c100000 〜 の約3MB，非タスクコンテキスト用のスタック領域を 〜
0x0c3fffff に確保している。0x0c000000 〜 0x0c000fff は、ROMモニタまた
はスタブのワークエリアとなっており、使用することができない．

・DVE-SH7700
依存部では、コード領域を 0x0c001000 〜 0x0c08ffff 約0.5MB、データ領域
を 0x0c080000 〜 の約0.5MB，非タスクコンテキスト用のスタック領域を 〜
0x0c0fffff に確保している。0x0c000000 〜 0x0c000fff は、ROMモニタまた
はスタブのワークエリアとなっており、使用することができない．


４．開発環境の構築

開発環境の構築方法については，GNU開発環境構築マニュアルを参照すること．


５．その他

5.1 ディレクトリ・ファイル構成

SH3 ターゲット依存部の各ファイルの概要は次の通り．

    config/sh3/
	Makefile.config	MakefileのSH3依存定義
	cpu_defs.h	    プロセッサ依存部のアプリケーション用定義
	cpu_config.h	プロセッサ依存部の構成定義
	cpu_config.c	プロセッサ依存部の関数
	cpu_support.S	プロセッサ依存部のサブルーチン
	cpu_context.h	コンテキスト操作
	makeoffset.c	offset.h 生成サポートプログラム
	cpu_insn.h	    低レベルのプロセッサ操作ルーチン
	start.S		    スタートアップモジュール
	shelf.ld	    ビッグエンディアン用リンカスクリプト
	shlelf.ld       リトルエンディアン用リンカスクリプト
	hw_timer.h      タイマ操作ルーチン
    sh3.h           SH3の定義


    config/sh3/card_e09a/
	Makefile.config	MakefileのDVE-68K/40依存定義
	sys_defs.h	システム依存部のアプリケーション用定義
	sys_config.h	システム依存部の構成定義
	sys_config.c	システム依存部の関数
	sys_support.S	システム依存部のサブルーチン
	hw_timer.h	タイマ操作ルーチン
	hw_serial.h	シリアルインタフェースデバイス操作ルーチン
	dve68k.h	DVE-68K/40 ハードウェア定義


    config/sh3/dvesh7700/
	Makefile.config	MakefileのCARD-E09A依存定義
	card_e09a.h     CARD-E09Aハードウェア定義
	hw_serial.h	    シリアルインタフェースデバイス操作ルーチン
    pce_header.S    バイナリの先頭に置くヘッダーファイル
	sys_config.c	システム依存部の関数
	sys_config.h	システム依存部の構成定義
	sys_defs.h      システム依存部のアプリケーション用定義
	sys_support.S	システム依存部のサブルーチン


    config/sh3/rsh3/
	Makefile.config	MakefileのRSH3依存定義
	hw_serial.h	    シリアルインタフェースデバイス操作ルーチン
	rsh3.h	        RSH3 ハードウェア定義
	sys_config.c	システム依存部の関数
	sys_config.h	システム依存部の構成定義
	sys_defs.h	    システム依存部のアプリケーション用定義
	sys_support.S	システム依存部のサブルーチン

    
    config/sh3/dvesh7700
	Makefile.config	MakefileのDVESH7700依存定義
	dvesh7700.h	    DVESH7700 ハードウェア定義
	hw_serial.h	    シリアルインタフェースデバイス操作ルーチン
	sys_config.c	システム依存部の関数
	sys_config.h	システム依存部の構成定義
	sys_defs.h	    システム依存部のアプリケーション用定義
	sys_support.S	システム依存部のサブルーチン