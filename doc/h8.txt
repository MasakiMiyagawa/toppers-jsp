               ＝ TOPPERS/JSPカーネル ユーザズマニュアル ＝
                            （H8 ターゲット依存部）
   
               （Release 1.3対応，最終更新: 10-Apl-2002）
   
   ------------------------------------------------------------------------ 
    TOPPERS/JSP Kernel
        Toyohashi Open Platform for Embedded Real-Time Systems/
        Just Standard Profile Kernel
   
    Copyright (C) 2000,2001 by Embedded and Real-Time Systems Laboratory
                                Toyohashi Univ. of Technology, JAPAN
    Copyright (C) 2001 by Industrial Technology Institute,
                                Miyagi Prefectural Government, JAPAN
    Copyright (C) 2001,2002 by Dep. of Computer Science and Engineering
                     Tomakomai National College of Technology, JAPAN
   
    上記著作権者は，Free Software Foundation によって公表されている 
    GNU General Public License の Version 2 に記述されている条件か，以
    下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェア（本ソフトウェ
    アを改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
    利用と呼ぶ）することを無償で許諾する．
    (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
        権表示，この利用条件および下記の無保証規定が，そのままの形でソー
        スコード中に含まれていること．
    (2) 本ソフトウェアを再利用可能なバイナリコード（リロケータブルオブ
        ジェクトファイルやライブラリなど）の形で利用する場合には，利用
        に伴うドキュメント（利用者マニュアルなど）に，上記の著作権表示，
        この利用条件および下記の無保証規定を掲載すること．
    (3) 本ソフトウェアを再利用不可能なバイナリコードの形または機器に組
        み込んだ形で利用する場合には，次のいずれかの条件を満たすこと．
      (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
          権表示，この利用条件および下記の無保証規定を掲載すること．
      (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
          こと．
    (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
        害からも，上記著作権者を免責すること．
   
    本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
    本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
    ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
    かなる損害に関しても，その責任を負わない．
   
    @(#) $Id: h8.txt,v 1.3 2002/04/10 10:40:53 honda Exp $
   ------------------------------------------------------------------------

1.  H8 ターゲット依存部の概要

1. 1  ターゲットシステムと開発環境

  H8 プロセッサのターゲットシステムは、H8/3048F と H8/3067F を搭載した
以下のボードである。

   ・(株) 秋月電子通商製の AKI-H8/3048F
   ・(株) 秋月電子通商製の AKI-H8/3067F

なお、何もしないタスク 1 個の最小構成でも、必要な RAM 容量は H8 の内蔵
RAM 容量の 4[Kbyte] を超える。このため外部 RAM の増設が必要で、 外部ア
ドレス空間を有効にする必要がある。 現在の構成では、H8/3048F がモード 5
の内蔵 ROM 有効拡張 1M バイトモード、H8/3067F もモード 5 の内蔵 ROM 有
効拡張 16M バイトモードを想定している。
  開発環境は、Windows 2000 上の cygwin の開発環境を用いた。また、 デバッ
グモードとリリースモードでモジュールの実行方法が異なっている。デバッグ
モードでは (株) 秋月電子通商製のモニターデバッカを H8 の内蔵フラッシュ
ROM に書き込み、 デバッグするモジュールを外部 RAM にロードしてデバッグ
を行う。リリースモードでは、デバッグの終了したモジュールを内蔵フラッシュ
ROM に書き込むことを想定している。デバッグモードとリリースモードの切り
替えは、 ディレクトリ $(CPU)/$(SYS) にある Makefile.config の
AKI_MONITOR の定義による。

1. 2  サポートする機能の概要

  性能評価用システム時刻参照機能 (vxget_tim) はサポートしているが、 割
込みマスクの変更・参照 (chg_ixx、 get_ixx)、 割り込みの禁止と許可
(dis_int、ena_int) はサポートしていない。

1. 3  他のターゲットへのポーティング

  H8/300H シリーズであれば、ポーティングは容易に出来ると思われる。また
H8S シリーズの H8S/2350 へのポーティングも行われており、将来的に H8 と
H8S シリーズを統合する予定である。

1. 4  シリアルポート (SCI)

  H8/3048F には SCI0 と SCI1 の 2 本、 H8/3067F には SCI0 から SCI2 の
3 本のシリアルポートがあり、 sys_config.h に定義している NUM_PORT によ
り何本使用するか指定できる。 現在の実装では 2 本まで使用できる。JSP カー
ネルのログ出力用には SCI1 を使用している。シリアルポートの設定を以下に
示す。

   ・ボーレイト、H8/3048F は 9600[bps]、H8/3067F は 19200[bps]
   ・データ長、8 ビット
   ・ストップビット、1 ビット
   ・パリティなし

2.  H8 プロセッサ依存部の機能

  カーネルとシステムサービス機能の中で、 H8 依存の部分について解説する。 

2. 1  データ型

  int 型と unsigned int 型のサイズは 32 ビットである。

2. 2  割込み管理機能と割込みハンドラ

  NMI はカーネル管理外の割り込みである。 CCR レジスタの I ビットと UI
ビットをセットすることによって、CPU ロック時や初期化ルーチン内で、 NMI
以外の割り込みは全て禁止可能である。 
  H8 の割込みマスクは、CCR レジスタの I ビットと UI ビットであるが、本
実装では SYSCR レジスタの UE ビットをクリアし、I ビットを 1 に固定して、
UI ビットで全体の割り込みを制御している。
  内蔵ディバイスや外部割込みは個別のレジスタにあるビットのマスクと、割
込み優先レジスタ (IPRA と IPRB) の個別割り込みの優先度で制御している。
マスクが分散しているので、 chg_ipm 等の IPM の操作機能はサポートしてい
ない。

2. 3  CPU 例外管理機能と CPU 例外ハンドラ

  割込みハンドラ番号のデータ型 (EXCNO) は unsigned int 型に定義されて
いる。 H8 の割込みと CPU 例外ベクタは ROM 領域にあり、動的に内容を変更
するためには特別の方法が必要であるため、動的なハンドラの登録機能はない。
従って、割込みハンドラの設定関数 define_inh、 CPU 例外ハンドラの設定関
数 define_exc は、何もしない関数である。

2. 4  スタートアップモジュール

  H8 依存のスタートアップモジュール (start.S) は次に示す初期化を実行し
た後、 カーネル (kernel_start) を起動する。ただし、kernel_start から戻っ
てくることは想定していない。

   (1)   スタックポインタの設定

   (2)   hardware_init_hook の呼出し
           hardware_init_hook が 0 でなければ、hardware_init_hook を呼
         出す。hardware_init_hook はカーネルを起動する前に、ターゲット
         依存のハードウェア的な初期化を行うために用意されている。 本実
         装では、 SYSCR レジスタの UE ビットのクリア、割込み優先レジス
         タ (IPRA と IPRB) の個別割り込みの優先度の設定、 外部メモリ空
         間の有効化を行っている。hardware_init_hook が未定義の場合、リ
         ンカスクリプトの記述によりこのシンボルが 0 に定義される。 

   (3)   bss セクションの初期化
           bss セクションの全領域を 0 クリアーする。

   (4)   data セクションの初期化
           data セクションを外部 RAM に転送する。

   (5)   software_init_hook の呼出し
           software_init_hook が 0 でなければ、software_init_hook を呼
         出す。software_init_hook はカーネルを起動する前に、ソフトウェ
         ア環境 (ライブラリ等) 依存の初期化を行うために用意されている。
         例えば、ライブラリの初期設定などである。software_init_hook が
         未定義の場合、リンカスクリプトの記述によりこのシンボルが 0 に
         定義される。

2. 5  割込み発生時のスタック使用量について

  割込みネストレベルが 0 で割込みが発生すると、 タスク独立部用スタック
にレジスタを保存した後、割込み用スタックに切り替えるため、タスク独立部
用スタック使用量は PC+CCR と ER0 から ER6 の 32 バイトである。 SP(ER7)
は割込み用のスタックに保存される。 
  割込みネストレベル 0 では、 タスク独立部用スタックにレジスタを保存す
るため、割込み用のスタック使用量は PC+CCR と ER0 から ER6 の 32 バイト
×(最大ネスト数-1) と、割込みネストレベル 0 で保存される SP(ER7) の

   32バイト×(最大ネスト数 - 1) + 4バイト

である。最小構成では、多重割込みを発生するディバイスは、タイマとシリア
ル入出力の 3 個なので、割込み用のスタック使用量は

   32バイト×(3 - 1) + 4バイト = 68 バイト

である。

3.  システム依存部の機能

3. 1  システムクロックドライバ

  システムクロックドライバが isig_tim を呼出す周期は、 sys_defs.h 内の
TIC_NUME と TIC_DENO で定義されており、ディフォルトは 1[ms] 周期である。
この定義を変更することで、 isig_tim を呼出す周期を変更できる。ただし、
H8/3048F のクロックが 16[MHz]、 H8/3067F のクロックが 20[MHz] の場合、
タイマの精度が 0.5[us] のため、 0.5[us] 単位で端数になる値を設定すると、
|isig_tim の呼出し周期に誤差が発生する。
  ディフォルトのクロックディバイスは H8/3048F が ITU0、 H8/3067F が 16
ビットタイマユニット 0 を使用している。

3. 2  性能評価用システム時刻参照機能

  H8 では、性能評価用システム時刻参照機能 (vxget_tim) をサポートしてい
る。精度は 0.5[us] で、SYSUTIM 型は UD 型 (64 ビット符号なし整数型) で
ある。

3. 3  シリアルインタフェースドライバ

  H8/3048F には SCI0 と SCI1 の 2 本、 H8/3067F には SCI0 から SCI2 の
3 本のシリアルポートがあり、 sys_config.h に定義している NUM_PORT によ
り何本使用するか指定できる。 現在の実装では 2 本まで使用できる。JSP カー
ネルのログ出力用には SCI1 を使用している。

3. 4  メモリマップ

3. 4. 1  H8/3048F のメモリマップ

  外部アドレス空間を有効にする必要があるため、モード 5 の内蔵 ROM 有効
拡張 1M バイトモードを想定している。

   (1)   デバッグ時

         0x00000 - 0x1ffff  内蔵 ROM、(株) 秋月電子通商製のモニターデバッカ
         0x20000 - 0x3ffff  外部 RAM、.text、.rodata
         0x40000 - 0xfef0f  外部 RAM、.data、.bss
         0xfef10 - 0xfefff  内蔵 RAM、(株) 秋月電子通商製のモニターデバッカ使用
         0xff000 - 0xff0ff  内蔵 RAM、仮想割込みベクタ領域 (.vectors)
         0xff100 - 0xfff0f  内蔵 RAM、タスク独立部用スタック
         0xfff10 - 0xfff1b  外部 RAM、空き
         0xfff1c - 0xfffff  内蔵 I/O レジスタ

   (2)   リリース時

         0x00000 - 0x1ffff  内蔵 ROM、.vectors、.text、.rodata
         0x20000 - 0xfef0f  外部 RAM、.data、.bss
         0xfef10 - 0xfff0f  内蔵 RAM、タスク独立部用スタック
         0xfff10 - 0xfff1b  外部 RAM、空き
         0xfff1c - 0xfffff  内蔵 I/O レジスタ

3. 4. 2  H8/3067F のメモリマップ

  外部アドレス空間を有効にする必要があるため、モード 5 の内蔵 ROM 有効
拡張 16M バイトモードを想定している。

   (1)   デバッグ時

         0x000000 - 0x1fffff  内蔵 ROM、(株) 秋月電子通商製のモニターデバッカ
         0x200000 - 0x2000ff  内蔵 RAM、仮想割込みベクタ領域 (.vectors)
         0x200100 - 0x207f23  外部 RAM、.text、.rodata、.data、.bss
         0x207f24 - 0x207fff  外部 RAM、(株) 秋月電子通商製のモニターデバッカ使用
         0xee0000 - 0xee0081  内蔵 I/O レジスタ
         0xffef20 - 0xffff1f  内蔵 RAM、タスク独立部用スタック
         0xffff20 - 0xffffe9  内蔵 I/O レジスタ

   (2)   リリース時

         0x000000 - 0x01ffff  内蔵 ROM、.vectors、.text、.rodata
         0x200000 - 0x207fff  外部 RAM、.data、.bss
         0xee0000 - 0xee0081  内蔵 I/O レジスタ
         0xffef20 - 0xffff1f  内蔵 RAM、タスク独立部用スタック
         0xffff20 - 0xffffe9  内蔵 I/O レジスタ

4.  開発

4. 1  開発環境の構築

  開発環境は、Windows 2000 上の cygwin の開発環境を用いた。 本実装に用
いたバージョンを以下に示す。

   binutils-2.11.2
   gcc-2.95.3
   newlib-1.9.0

configure のオプションは --target=h8300-hms である。 また、binutils の
configure のオプションには --disable-nls も指定すること。
  また、デバッグのため、 (株) 秋月電子通商製のモニタデバッカを使用して
いる。

4. 2  Makefile の設定

  Makefile で注意すべき設定を以下に示す。

   (1)   CYGWIN
           Cygwin 上でコンパイルする場合は CYGWIN = true を有効にする。

   (2)   all: jsp.S
           最終ターゲットは S レコードファイルのため、 all: $(JSPOBJ)
         をコメントアウトし、all: jsp.S を有効にする。

4. 3  ターゲットへのダウンロードと実行

  ターゲットへのダウンロードと実行には、 (株) 秋月電子通商製のモニタデ
バッカを使用する方法と直接 H8/3048F のフラッシュ ROM に書き込んで実行
する方法がある。

   (1)   H8/3048F で (株) 秋月電子通商製のモニタデバッカを使用する方法
         (デバッグモード)
           ディレクトリ $(CPU)/$(SYS) にある Makefile の AKI_MONITOR =
         true を有効にして make する。次に、H8/3048F の外部 RAM へのア
         クセスを有効にしなければならない。 RAM の構成により異なるが、
         アドレスバス A0 から A19 とデータバス D8 から D15 を有効にす
         るには、以下に示すポートに 0xff を書き込む。

            Port   Address
            P1DDR  0xfffc0
            P2DDR  0xfffc1
            P3DDR  0xfffc4
            P5DDR  0xfffc8

         最後に端末ソフトを使用して jsp.S を H8/3048F に転送し、実行す
         る。

   (2)   H8/3067F で (株) 秋月電子通商製のモニタデバッカを使用する方法
         (デバッグモード)
           ディレクトリ $(CPU)/$(SYS) にある Makefile の AKI_MONITOR =
         true を有効にして make する。H8/3067F では外部 RAM へのアクセ
         スが、すでに有効になっているため、特に何もせずに、 端末ソフト
         を使用して jsp.S を H8/3067F に転送し、実行することができる。

   (3)   内臓フラッシュ ROM に書き込んで実行する方法 (リリースモード)
           ディレクトリ $(CPU)/$(SYS) にある Makefile.config のディレ
         クトリ $(CPU)/$(SYS) にある Makefile の AKI_MONITOR = true を
         コメントアウトして make する。次に、(株) 秋月電子通商製等のフ
         ラッシュ ROM 書き込みプログラムで、フラッシュ ROM に書き込む。

4. 4  H8/3048F の外部 RAM の有効化

  リリースモードでは、 sys_support.S の _hardware_init_hook で、アドレ
スバス A0 から A19 とデータバス D8 から D15 を有効にした後、カーネルを
実行する。 これ以外にアドレスバスとデータバスを有効にする場合は、
sys_config.h の以下の部分を適当に編集する。

   /*
    *  外部アドレス空間制御
    */
   
   #if 0
   
   #define ENABLE_LOWER_DATA
   
   #define ENABLE_P8_CS    (H8P8DDR_CS0|H8P8DDR_CS1|\
                            H8P8DDR_CS2|H8P8DDR_CS3)
   #define ENABLE_PA_CS    (H8PADDR_CS4|H8PADDR_CS5|\
                            H8PADDR_CS6)
   #define ENABLE_PB_CS     H8PBDDR_CS7
   
   #endif      /* of #if 0 */

4. 5  H8/3067F の外部 RAM の有効化

  リリースモードでは、 sys_support.S の _hardware_init_hook で、アドレ
スバス A0 から A23、 データバス D8 から D15、 チップセレクト CS0 から
CS3 を有効にした後、カーネルを実行する。これ以外にアドレスバスとデータ
バスを有効にする場合は、sys_config.h の以下の部分を適当に編集する。

   /*
    *  外部アドレス空間制御
    */
   
   #define ENABLE_P8_CS    (H8P8DDR_CS0|H8P8DDR_CS1|\
                            H8P8DDR_CS2|H8P8DDR_CS3)
   
   #if 0
   
   #define ENABLE_LOWER_DATA
   #define ENABLE_PB_CS    (H8PADDR_CS4|H8PADDR_CS5|\
                            H8PADDR_CS6|H8PBDDR_CS7)
   
   #endif      /* of #if 0 */

5.  ファイル構成

5. 1  ディレクトリ・ファイル構成

   (1)   config/h8/

            Makefile.config  Makefile の H8 依存定義
            cpu_config.c     H8 プロセッサ依存部の C 関数
            cpu_config.h     H8 プロセッサ依存部の構成定義
            cpu_context.h    H8 プロセッサ依存部のコンテキスト操作
            cpu_defs.h       H8 プロセッサ依存部のアプリケーション用定義
            cpu_insn.h       H8 プロセッサのアセンブリ inline 関数
            cpu_support.S    H8 プロセッサのアセンブリ関数
            hw_serial.h      SCI の定義
            hw_timer.h       ITU の定義
            makeoffset.c     offset.h 生成サポート関数
            start.S          スタートアップモジュール

   (2)   config/h8/akih8_3048f/
           (株) 秋月電子通商製の AKI-H8/3048F ボードの依存部分

            Makefile.config  Makefile の AKI-H8/3048F ボード依存定義
            h8_3048f.h       H8/3048F プロセッサの定義
            debug.ld         デバッグ用リンカスクリプト
            release.ld       リリース用リンカスクリプト
            sys_config.c     AKI-H8/3048F ボード依存部の C 関数
            sys_config.h     AKI-H8/3048F ボード依存部の構成定義
            sys_defs.h       AKI-H8/3048F ボード依存部のアプリケーション用定義
            sys_support.S    AKI-H8/3048F ボード依存部のアセンブリ関数

   (3)   config/h8/akih8_3067f/
           (株) 秋月電子通商製の AKI-H8/3067F ボードの依存部分

            Makefile.config  Makefile の AKI-H8/3067F ボード依存定義
            h8_3067f.h       H8/3048F プロセッサの定義
            debug.ld         デバッグ用リンカスクリプト
            release.ld       リリース用リンカスクリプト
            sys_config.c     AKI-H8/3067F ボード依存部の C 関数
            sys_config.h     AKI-H8/3067F ボード依存部の構成定義
            sys_defs.h       AKI-H8/3067F ボード依存部のアプリケーション用定義
            sys_support.S    AKI-H8/3067F ボード依存部のアセンブリ関数
