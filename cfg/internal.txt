          ＝ mITRON4.0 コンフィギュレータ向け C++クラスライブラリ ＝

                   (Release 0.0対応, 最終更新: 2-Nov-2000)


-----------------------------------------------------------------------
  TOPPERS/JSP Kernel
      Toyohashi Open Platform for Embedded Real-Time Systems/
      Just Standard Profile Kernel
 
  Copyright (C) 2000 by Embedded and Real-Time Systems Laboratory
                              Toyohashi Univ. of Technology, JAPAN
 
  上記著作権者は，以下の条件を満たす場合に限り，本ソフトウェア（本ソ
  フトウェアを改変したものを含む．以下同じ）を使用・複製・改変・再配
  布（以下，利用と呼ぶ）することを無償で許諾する．
  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
      スコード中に含まれていること．
  (2) 本ソフトウェアをバイナリコードの形または機器に組み込んだ形で利
      用する場合には，次のいずれかの条件を満たすこと．
    (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
        権表示，この利用条件および下記の無保証規定を掲載すること．
    (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
        こと．
  (3) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
      害からも，上記著作権者を免責すること．
 
  本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
  本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
  ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
  かなる損害に関しても，その責任を負わない．
-----------------------------------------------------------------------

このドキュメントはTOPPERS/JSPに付属されるコンフィギュレータを改造して独自のコンフィギュレータを作成する際に必要となるクラスライブラリリファレンスである。ここではクラスの持つ意味から各関数の使い方などの解説を行う。




１．クラスセット

mITRON4.0コンフィギュレータ向けC++クラスライブラリ(以下 コンフィギュレータライブラリ)では、次のようなクラスが定義されている。

ID				: IDの管理、割当等を行う
Varient			: 数字、文字列等を種別を問わずに一括管理する変数
Array			: Valient型配列
Exception		: 例外型
Manager			: プログラム本体
MultiStream		: 複数の出力ファイルを一括管理するクラス
Parser			: ファイルのパーシングを行うクラス
StaticAPI		: 静的APIのベースクラス
Serializer		: ファイル出力を行うクラス

２．各クラスの詳細

２．１ ID型

ID型はmITRON仕様に準拠するようなID値の管理を行うクラスである。

コンストラクタ
	ID(const long Size = 255);
	explicit ID(long Lower, unsigned long Size = 255);
	explicit ID(long Lower, long Upper = 255);

	1番目は有効なID値の個数を与えてID型を生成する。最小値は1である。
	2番目は最小値と個数を与えてID型を生成する。
	3番目は最小値と最大値を与えてID型を生成する。
		#ID型はコピーコンストラクタを持たない。これはIDをコピー可能とするこ
		#とで該当オブジェクトのID管理に問題が起るのを避けるためである。

値の割当
	bool Assign(long id);

	値idを使用(予約)する。以後値idは解放されるまで利用出来なくなる。
	値の割当に成功した場合、関数はtrueを返す。値が利用できない範囲である場合、
	および値がすでに利用されている場合、関数はfalseを返す。

値の解放
	bool Resign(long id);

	値idを解放する。
	値の解放に成功した場合、関数はtrueを返す。
	値が範囲外または割当済みで無い場合、関数はfalseを返す。

値の割当確認
	bool IsAssigned(long id);
	bool operator [](long);
	
	値idがすでに割り当てられているかどうかを取得する。
	値がすでに割当済みである場合、関数はtrueを返す。
	値が範囲外または割当られていない場合、関数はfalseを返す。

値の範囲取得
	long GetMaxID(void);
	long GetMinID(void);

	GetMaxIDは割当済みIDの最大値を返す。
	GetMinIDは割当済みIDの最小値を返す。
	割当済みIDが無い場合 または 値が範囲外である場合、GetMaxIDは最小値-1を、
	GetMinIDは最大値+1を返す。

割当済みIDの個数の取得
	unsigned long GetCount(void);
	operator const unsigned long(void);

	すでに割り当てたIDの数を返す。

新規ID番号の取得
	long GetNewID(void);
	
	利用可能でもっとも小さいID番号を返す。
	この関数では値の割当は行わない。

ID値の正当性判定
	bool IsAvailable(void);
	operator const bool(void);

	次の規約に従い、ID値が正しく割り当てられているかを判定する。
	正しい場合はtrueを、そうでない場合はfalseを返す。

	割当規約
		1. ID値は連続でなければならない
		2. ID値は有効範囲内でなければならない
		3. ID値は最小値から始まらなければならない

２．２ Valient型

Valient型は文字列、整数値、浮動小数点などの値をまとめて管理するための型であ
る (VisualBASICのany型に相当)。

型識別子
	enum Valient::tagType
		INTEGER		: 整数値
		DOUBLE		: 浮動小数点
		STRING		: 文字列
		POINTER		: ポインタ

コンストラクタ
	Valient(void);
	Valient(const Valient &);
	Valient(int);
	explicit Valient(unsigned int);
	Valient(double);
	explicit Valient(char *);
	Valient(void *);

	1番目は空のValient型を生成する。
	2番目はコピーコンストラクタである。
	以降 引数を持つものはそれぞれ引数を初期値とするコンストラクタである。

値の設定
	bool Set(int);
	bool Set(unsigned int);
	bool Set(double);
	bool Set(char *);
	bool Set(void *);

	現在保持していいる値を解放し、指定された値を保持する。
	関数は正しく設定できた場合はtrueを、そうでない場合はfalseを返す。

値の取得
	int GetInteger(int =0);
	char * GetString(char * =0l);
	double GetDouble(double =0.0);
	void * GetPointer(void * =0l);

	現在保持している値を取得する。
	関数は保持している型が合わない場合、引数として与えられた値を返す。

値の強制解放
	bool Clear(void);

	現在保持している値を強制的に解放する。

値の型の取得
	enum tagType GetType(void);
	operator const enum tagType(void);

	現在保持している値の型を取得する。

値の型の比較
	bool operator ==(enum tagType);

	現在保持している値の型の比較を行う。
	一致した場合はtrue、そうでない場合はfalseを返す。

２．３ Array型

Array型はValient型の配列の生成、保持、管理を行う。

型
	enum Array::tagType
		EMPTY	: 要素は空である
		ARRAY	: 要素は配列(Array型)である
		VALUE	: 要素は値(Valient型)である

コンストラクタ
	Array(void);
	Array(const Array &);

	1番目は空の配列を生成する。
	2番目はコピーコンストラクタである。

配列要素への値の設定
	bool Set(unsigned int pos, Valient & val);
	bool Set(unsigned int pos, Valient * val);

	posで示される配列要素へ値valを設定する。
	posが既存の配列である場合は値を変更し、無い場合は新たにposまでの配列を自
	動で生成する。pos以外の自動生成された要素の中身は空(Array::EMPTY)である。
	1番目はコピーを生成して配列要素に設定する。
	2番目はそのものを配列要素として設定し、破棄はArrayクラスが行う。
	注)ポインタ渡ししたValient型を手動で破棄すると実行時エラーとなる
	
	bool Set(unsigned int pos,Array & ary);
	bool Set(unsigned int pos,Array * ary);

	posで示される配列要素へ配列aryを設定する。
	posが既存の配列である場合は値を変更し、無い場合は新たにposまでの配列を自
	動で生成する。pos以外の自動生成された要素の中身は空(Array::EMPTY)である。
	1番目はコピーを生成して配列要素に設定する。
	2番目はそのものを配列要素として設定し、破棄はArrayクラスが行う。
	注)ポインタ渡ししたArray型を手動で破棄すると実行時エラーとなる


Valient型の配列要素のポインタ取得
	Valient * GetValuePtr(unsigned int pos);
	
	posで示される配列要素の値へのポインタを取得する。
	posが範囲外またはposで示される配列要素が値で無かった場合、
	関数は(Valient *)0lを返す。

Array型の配列要素のポインタ取得
	Array * GetArrayPtr(unsigned int pos)

	posで示される配列要素の配列へのポインタを取得する。
	posが範囲外またはposで示される配列要素が配列で無かった場合、
	関数は(Array *)0lを返す。

配列要素の型の取得
	tagType GetType(unsigned int pos);
	
	posで示される配列要素の型を返す。
	posが範囲外であった場合はArray::EMPTYを返す。

配列要素の値への参照
	Valient & operator [](unsigned int pos);

	posで示される配列要素の値への参照を取得する。
	注)本関数はposが範囲外であるかどうかを確認しない。

配列要素が配列であることの確認
	bool IsArray(unsigned int pos)
	
	配列要素posが配列であった場合はtrueを返す。
	そうでない場合やposが有効範囲外であった場合はfalseを返す。

配列要素の数の取得
	unsigned int Size(void);

	配列要素の数を取得する。

配列要素の全削除
	bool Clear(void);

	配列要素を全て破棄する。

２．３ Exception

Exception型はコンフィギュレータライブラリ内で一貫して利用される例外処理用の
クラスである。

コンストラクタ
	Exception(void) 
	Exception(const char * src)
	Exception(const std::string & src)
	Exception(const Exception & src)

	1番目は"原因不明のエラー"という詳細情報をもつ例外クラスを生成する。
	2、3番目はそれぞれ引数を詳細情報とする例外クラスを生成する。
	4番目はコピーコンストラクタである。

詳細情報の取得
	virtual std::string & GetReason(void) 
	operator const char * (void)
	operator const std::string & (void)
	
	詳細情報を取得する。
	注)下2つのオペレータはGetReason関数を実行する。

２．４ Manager

Manager型は本プログラムの中核となるクラスである。

APIの定義・登録
	void DeclareAPI(void);
	void DeclareAPI(class StaticAPI *);

	静的APIを定義・登録する。詳細は後述する。

シリアライザの定義・登録
	void DeclareSerializer(void);
	void DeclareSerializer(class Serializer *);

	シリアライザを定義・登録する。詳細は後述する。

コンストラクタ
	Manager(class Parser * p);

	静的APIファイルパーサpを利用してクラスを初期化する。
	パーサpはManagerが自動で削除する。

プログラム本体
	bool Body(char * filename);
	
	コンフィギュレーションファイルfilenameに対して処理を行う。
	

MultiStream		: 複数の出力ファイルを一括管理するクラス
Parser			: ファイルのパーシングを行うクラス
StaticAPI		: 静的APIのベースクラス
Serializer		: ファイル出力を行うクラス



３．動作概念

３．１ StaticAPIとSerializer

コンフィギュレータライブラリではファイル操作は入力部と出力部の2つからなる。
入力部に相当するのがStaticAPIクラスであり、出力部に相当するのがSerializerク
ラスである。

StaticAPIクラスは読み込んだパラメータを分解し、正しい値であるかどうかを確認
し、必要であれば値を割当てる作業を担う。
Serializerクラスは出力前に出力すべき情報の正当性を確認し、正当であると判断す
ればそれらの情報を出力する作業を担う。

プログラムの主な流れは
	1. 全コンフィギュレーション情報の読み出しと
		対応するStaticAPI::Bodyの呼び出し
	2. 全シリアライザに対する出力チェック
	3. 全シリアライザに対する出力要請
の3段階で行われる。

両方のクラスともManager::DeclareXXX関数にて登録を行う。

Manager::DeclareAPI(void)ではStaticAPIの定義を行う。定義はDeclareAPIではMana
ger::DeclareAPI(StaticAPI &)を利用してStaticAPIクラスのインスタンスをManager
に登録することで行う。同一のAPIを複数回登録するとエラーとなる。

例
void Manager::DeclareAPI(void)
{
	DeclareAPI(task.API_CRE_TSK);
	DeclareAPI(task.API_DEF_TEX);
	....
	DeclareAPI(initializehandler.API_ATT_INI);
}

Manager::DeclareSerializer(void)ではシリアライザの定義を行う。定義はDeclareSerializer(Serializer &)を利用してSerializerクラスのインスタンスをManagerに登録することで行う。シリアライザの呼び出しは登録順に行われる。同一シリアライザを複数回登録することも可能であるが、その場合はチェックも登録順で複数回実行される。

例
void Manager::DeclareSerializer(void)
{
	DeclareSerializer(&misc);
	DeclareSerializer(&task);
	DeclareSerializer(&semaphore);
	...
	DeclareSerializer(&initializehandler);
	DeclareSerializer(&misc);
}


４．新しいAPIの作成方法

新しいAPIを作成するためには、次の作業が必要となる。
	1. 静的APIクラスの作成
	2. シリアライザの作成
	3. Manager::DeclareAPIの作成
	4. Manager::DeclareSerializerの作成

４．１ 静的APIクラスの生成

静的APIクラスはStaticAPIクラスを派生させることで生成できる。

StaticAPI::GetAPINameはコンフィギュレーションファイル中で利用されるAPIの名称
を定める。Managerはこれをもとに処理のディスパッチを行う。基本的にAPI名称は大
文字を原則とする。

StaticAPI::Bodyはコンフィギュレーション情報を処理する関数である。

例 - INCLUDE文を処理するStaticAPIクラス
class INCLUDE : public StaticAPI
{
public:
	char * GetAPIName(void) { return "INCLUDE"; };
	void Body(Array &);
};

この宣言を一括で行うためのマクロも存在する。
	DECLARE_API( API名称 )
	DECLARE_APIマクロは他のクラス内部にAPI_xxxという静的APIクラスを生成する。

５．



５．使用許諾条件
本プログラムはTOPPERS/JSPの一部である。使用許諾条件は原則としてTOPPERS/JSPの
ものに従う。


